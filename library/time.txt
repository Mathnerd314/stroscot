symbol JD RJD MJD TJD DJD CNES_JD CCSDS_JD Lilian RD Unix DotNet


julianEpochTime -- proleptic Gregorian calendar specified in ISO-8601.

-- Julian date
julianEpochTime JD = 12:00 November 24, -4714

-- Reduced JD
julianEpochTime RJD = 12:00 November 16, 1858

-- Modified JD
julianEpochTime MJD = 0:00 November 17, 1858

-- Truncated JD
julianEpochTime TJD = 0:00 May 24, 1968

-- Dublin JD
julianEpochTime DJD = 12:00 December 31, 1899

-- CNES JD
julianEpochTime CNES_JD = 0:00 January 1, 1950

-- CCSDS JD
julianEpochTime CCSDS_JD = 0:00 January 1, 1958

-- Lilian date
julianEpochTime Lilian = 0:00 October 14, 1582

-- Rata Die
julianEpochTime RD = 0:00 December 31, 0

-- .NET DateTime
julianEpochTime DotNet = 0:00 January 1, 1

-- Unix epoch
julianEpochTime Unix = 0:00 January 1, 1970


TAI/TT Epoch
0:00 January 1, 1977 TAI/TT
MJD 43144.0003725 TCG
UT2 Epoch
0:00 January 1, 1958 UT2/TAI
MJD 36204.0 TAI
GPS Epoch
0:00 January 6, 1980 UTC / GPS
0:00:19 January 6, 1980 TAI
MJD 44244.0 GPS

J2000 epoch
12:00 2000-01-01
MJD 51544.5 TT

J1900 epoch
1899 DEC 31 12:00:00
JD 2415020

timex =
  { time_offset : long*micronano
  , freq_offset : long*2^-16 ppm
  , maxerror :  long*microseconds
  , esterror :  long*microseconds
  , status : ClockStatus
  , constant : long
  , precision : long*microseconds
  , tolerance : long*2^-16 ppm
  , time : timeval
  , tick : long*microseconds
  , ppsfreq : long*2^-16 PPM
  , jitter : long*micronano
  , shift : int*seconds
  , stabil : long*2^-16 PPM
  , jitcnt : long
  , calcnt : long
  , stbcnt : long
  , tai : int*seconds
  }
ntptimeval = { time : timeval, maxerror : long, esterror : long, tai_offset : long }

clock_gettime : clockid_t -> Op timespec
adjtimex : TimeX -> Modes -> Op (ClockState,timex)
ntp_gettimex : Op (ClockState, ntptimeval)

timespec = {seconds : time_t, nanoseconds : long}
clockid_t = {Realtime, Monotonic, ProcessCPUTime, ThreadCPUTime}
micronano = if STA_NANO then nanoseconds else microseconds
timeval = { seconds : time_t, tv_usec : micronano }
ClockState = {Synchronized,WillInsertLeapSecond,WillDeleteLeapSecond,LeapSecondInProgress,LeapSecondOccurred,Bad}

Adjtimex can determine if a leap second is occuring or will occur in the near future.

QueryPerformanceCounter : Op counts
GetSystemTimePreciseAsFileTime : Op FILETIME
GetSystemTime : Op SYSTEMTIME -- second can be 60 during a leap second if you opt in via a special flag PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND



counts = LARGE_INTEGER # represent time in units of 1 second/(the frequency of the performance counter obtained from QueryPerformanceFrequency)
FILETIME = { dwHighDateTime : DWORD, dwLowDateTime : DWORD } -- a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
SYSTEMTIME = {
  Year : WORD,
  Month : WORD,
  DayOfWeek : WORD,
  Day : WORD,
  Hour : WORD,
  Minute : WORD,
  Second : WORD,
  Milliseconds : WORD,
}
