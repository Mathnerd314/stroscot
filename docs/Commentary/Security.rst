Security
########

Stroscot aims to have built-in security features. This means providing security functionality in the standard library, such as encryption algorithms and communication protocols, but also designing the library and the language so that it is easy to write secure code and hard to write insecure code.

Best practices
==============

At the moment no programming language has a good track record of being secure. `WhiteSource <https://www.mend.io/blog/is-one-programming-language-more-secure/>`__ concluded in 2019 that Ruby had the lowest number of reported vulnerabilities out of popular web languages, but even Ruby had `5 vulnerabilities <https://www.cvedetails.com/vulnerability-list/vendor_id-7252/product_id-12215/Ruby-lang-Ruby.html>`__ in 2022 in the base runtime, and it easy to write security antipatterns that lead to issues such as SQL injection. To improve in this area, there are various security-related features. Some are implemented in new languages, for example, Rust's borrows checker and Rune's "secrets" mechanism, but most are more obscure and live in academic papers and third-party analysis tools.

As `Hare <https://harelang.org/blog/2022-06-21-safety-features/>`__ writes, "how do we evaluate the trade-offs of a particular safety feature?" Hare proposes to evaluate against the language goals. Stroscot's goals are functionality and minimality in that order. For security, functionality means protecting against all types of security risks, both common and uncommon. This is somewhat daunting as for example `CWE <https://cwe.mitre.org/data/index.html>`__ lists 933 weaknesses. Certainly it would be good to go through all these but I don't have much time. Fortunately, there is the OWASP Application Security Verification Standard. It points out that the CWE is quite duplicative and condenses it down to `286 requirements <https://github.com/OWASP/ASVS/blob/d8fde8b6592af2b8022590ec9d9a1765fe920651/4.0/docs_en/OWASP%20Application%20Security%20Verification%20Standard%204.0.3-en.csv>`__. The `bleeding edge version 5 <https://github.com/OWASP/ASVS/tree/d8fde8b6592af2b8022590ec9d9a1765fe920651/5.0/en>`__ further condenses it, removing more duplicate and out of scope requirements. The OWASP ASVS is certainly not comprehensive, as it is web-focused and community-developed, but it is definitely one of the leading standards. Implementing support for it in Stroscot is certainly a good first step, and goes above and beyond what any currently-popular language is doing. For now, I will focus only on the ASVS v5 unreleased version, and leave the mitigation of other weaknesses to the future.

