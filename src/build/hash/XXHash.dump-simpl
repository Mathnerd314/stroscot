
==================== Tidy Core ====================
2021-04-15 02:29:30.028668911 UTC

Result size of Tidy Core
  = {terms: 196, types: 174, coercions: 13, joins: 0/6}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule3 = GHC.Types.TrNameS Main.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule1 = GHC.Types.TrNameS Main.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule = GHC.Types.Module Main.$trModule3 Main.$trModule1

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
test [InlPrag=NOINLINE] :: Word# -> (# Word#, Word# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []]
test
  = \ (a_aoL :: Word#) ->
      (# timesWord# 2## a_aoL, timesWord# a_aoL a_aoL #)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Main.main3 :: [Char]
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.main3
  = GHC.Types.: @ Char GHC.Show.$fShow(,)2 (GHC.Types.[] @ Char)

-- RHS size: {terms: 73, types: 57, coercions: 0, joins: 0/3}
Main.main2 :: String
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 482 30}]
Main.main2
  = case {__pkg_ccall_GC main "test2" Word# -> (# Word#, Word# #)}_d132
           2##
    of
    { (# ipv_s14Y, ipv1_s14Z #) ->
    GHC.Types.:
      @ Char
      GHC.Show.$fShow(,)4
      (let {
         i#_a1DG :: Int#
         [LclId]
         i#_a1DG = word2Int# ipv_s14Y } in
       let {
         karg_s1F0 :: String
         [LclId]
         karg_s1F0
           = GHC.Show.$fShow(,)_$sgo1
               Main.main3
               (\ (w2_a1DK [OS=OneShot] :: String) ->
                  let {
                    i#1_X1Ed :: Int#
                    [LclId]
                    i#1_X1Ed = word2Int# ipv1_s14Z } in
                  case >=# i#1_X1Ed 0# of {
                    __DEFAULT ->
                      case GHC.Show.$w$cshowsPrec4
                             0#
                             (integer-gmp-1.0.3.0:GHC.Integer.Type.wordToInteger ipv1_s14Z)
                             w2_a1DK
                      of
                      { (# ww3_a1DP, ww4_a1DQ #) ->
                      GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
                      };
                    1# ->
                      case GHC.Show.$w$cshowsPrec4
                             0#
                             (integer-gmp-1.0.3.0:GHC.Integer.Type.smallInteger i#1_X1Ed)
                             w2_a1DK
                      of
                      { (# ww3_a1DP, ww4_a1DQ #) ->
                      GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
                      }
                  })
               (GHC.Types.[] @ ShowS) } in
       case >=# i#_a1DG 0# of {
         __DEFAULT ->
           case GHC.Show.$w$cshowsPrec4
                  0#
                  (integer-gmp-1.0.3.0:GHC.Integer.Type.wordToInteger ipv_s14Y)
                  (GHC.Types.: @ Char GHC.Show.showList__1 karg_s1F0)
           of
           { (# ww3_a1DP, ww4_a1DQ #) ->
           GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
           };
         1# ->
           case GHC.Show.$w$cshowsPrec4
                  0#
                  (integer-gmp-1.0.3.0:GHC.Integer.Type.smallInteger i#_a1DG)
                  (GHC.Types.: @ Char GHC.Show.showList__1 karg_s1F0)
           of
           { (# ww3_a1DP, ww4_a1DQ #) ->
           GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
           }
       })
    }

-- RHS size: {terms: 73, types: 57, coercions: 0, joins: 0/3}
Main.main4 :: String
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 482 30}]
Main.main4
  = case test 2## of { (# ipv_s14T, ipv1_s14U #) ->
    GHC.Types.:
      @ Char
      GHC.Show.$fShow(,)4
      (let {
         i#_a1DG :: Int#
         [LclId]
         i#_a1DG = word2Int# ipv_s14T } in
       let {
         karg_s1EQ :: String
         [LclId]
         karg_s1EQ
           = GHC.Show.$fShow(,)_$sgo1
               Main.main3
               (\ (w2_a1DK [OS=OneShot] :: String) ->
                  let {
                    i#1_X1E8 :: Int#
                    [LclId]
                    i#1_X1E8 = word2Int# ipv1_s14U } in
                  case >=# i#1_X1E8 0# of {
                    __DEFAULT ->
                      case GHC.Show.$w$cshowsPrec4
                             0#
                             (integer-gmp-1.0.3.0:GHC.Integer.Type.wordToInteger ipv1_s14U)
                             w2_a1DK
                      of
                      { (# ww3_a1DP, ww4_a1DQ #) ->
                      GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
                      };
                    1# ->
                      case GHC.Show.$w$cshowsPrec4
                             0#
                             (integer-gmp-1.0.3.0:GHC.Integer.Type.smallInteger i#1_X1E8)
                             w2_a1DK
                      of
                      { (# ww3_a1DP, ww4_a1DQ #) ->
                      GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
                      }
                  })
               (GHC.Types.[] @ ShowS) } in
       case >=# i#_a1DG 0# of {
         __DEFAULT ->
           case GHC.Show.$w$cshowsPrec4
                  0#
                  (integer-gmp-1.0.3.0:GHC.Integer.Type.wordToInteger ipv_s14T)
                  (GHC.Types.: @ Char GHC.Show.showList__1 karg_s1EQ)
           of
           { (# ww3_a1DP, ww4_a1DQ #) ->
           GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
           };
         1# ->
           case GHC.Show.$w$cshowsPrec4
                  0#
                  (integer-gmp-1.0.3.0:GHC.Integer.Type.smallInteger i#_a1DG)
                  (GHC.Types.: @ Char GHC.Show.showList__1 karg_s1EQ)
           of
           { (# ww3_a1DP, ww4_a1DQ #) ->
           GHC.Types.: @ Char ww3_a1DP ww4_a1DQ
           }
       })
    }

-- RHS size: {terms: 13, types: 13, coercions: 4, joins: 0/0}
Main.main1 :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 0}]
Main.main1
  = \ (s_a13I :: State# RealWorld) ->
      case ((GHC.IO.Handle.Text.hPutStr'
               GHC.IO.Handle.FD.stdout Main.main4 GHC.Types.True)
            `cast` (GHC.Types.N:IO[0] <()>_R
                    :: IO () ~R# (State# RealWorld -> (# State# RealWorld, () #))))
             s_a13I
      of
      { (# ipv_a13K, ipv1_a13L #) ->
      ((GHC.IO.Handle.Text.hPutStr'
          GHC.IO.Handle.FD.stdout Main.main2 GHC.Types.True)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: IO () ~R# (State# RealWorld -> (# State# RealWorld, () #))))
        ipv_a13K
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #)) ~R# IO ())}]
main
  = Main.main1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #)) ~R# IO ())

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
Main.main5 :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= GHC.TopHandler.runMainIO1
                 @ ()
                 (Main.main1
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #)) ~R# IO ()))}]
Main.main5
  = GHC.TopHandler.runMainIO1
      @ ()
      (Main.main1
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: (State# RealWorld -> (# State# RealWorld, () #)) ~R# IO ()))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main5
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #)) ~R# IO ())}]
:Main.main
  = Main.main5
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #)) ~R# IO ())


