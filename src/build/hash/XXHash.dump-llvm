
==================== LLVM Code ====================
2021-04-14 18:50:25.931789584 UTC

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"


==================== LLVM Code ====================
2021-04-14 18:50:25.932109351 UTC

declare ccc i32 @memcmp(i8*, i8*, i64)


==================== LLVM Code ====================
2021-04-14 18:50:25.932239866 UTC

declare ccc i8* @memcpy(i8*, i8*, i64)


==================== LLVM Code ====================
2021-04-14 18:50:25.932357902 UTC

declare ccc i8* @memmove(i8*, i8*, i64)


==================== LLVM Code ====================
2021-04-14 18:50:25.932473011 UTC

declare ccc i8* @memset(i8*, i64, i64)


==================== LLVM Code ====================
2021-04-14 18:50:25.932584623 UTC

declare ccc i64 @newSpark(i8*, i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.932740929 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2021-04-14 18:50:25.932963387 UTC



==================== LLVM Code ====================
2021-04-14 18:50:25.933981693 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.934383397 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.934628336 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.9349373 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.935248932 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.936142512 UTC

%Main_test_closure_struct = type <{i64}>
@Main_test_closure$def = internal global %Main_test_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_test_info$def to i64)}>
@Main_test_closure = alias i8, bitcast (%Main_test_closure_struct* @Main_test_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.936907287 UTC

@Main_test_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_test_info$def to i8*)
define ghccc void @Main_test_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967300, i64 0, i32 14, i32 0}>
{
n1I2:
  %ls1Hm = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c1HX
c1HX:
  %ln1I3 = load i64, i64* %R2_Var
  %ln1I4 = shl i64 %ln1I3, 1
  store i64 %ln1I4, i64* %ls1Hm
  %ln1I5 = load i64, i64* %R2_Var
  %ln1I6 = load i64, i64* %R2_Var
  %ln1I7 = mul i64 %ln1I5, %ln1I6
  store i64 %ln1I7, i64* %R2_Var
  %ln1I8 = load i64, i64* %ls1Hm
  store i64 %ln1I8, i64* %R1_Var
  %ln1I9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln1Ia = bitcast i64* %ln1I9 to i64*
  %ln1Ib = load i64, i64* %ln1Ia, !tbaa !2
  %ln1Ic = inttoptr i64 %ln1Ib to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Id = load i64, i64* %R1_Var
  %ln1Ie = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Ic( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln1Id, i64 %ln1Ie, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.937990201 UTC

%Main_main2_closure_struct = type <{i64, i64, i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_con_info to i64), i64 ptrtoint (i8* @base_GHCziShow_zdfShowZLz2cUZR2_closure to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.9412849 UTC

%_u1K2_srt_struct = type <{i64, i64, i64, i64}>
%Main_main1_closure_struct = type <{i64, i64, i64, i64}>
@_u1K2_srt$def = internal global %_u1K2_srt_struct<{i64 ptrtoint (i8* @stg_SRT_2_info to i64), i64 ptrtoint (i8* @integerzmwiredzmin_GHCziIntegerziType_wordToInteger_closure to i64), i64 ptrtoint (i8* @base_GHCziShow_zdwzdcshowsPrec4_closure to i64), i64 0}>
@_u1K2_srt = internal alias i8, bitcast (%_u1K2_srt_struct* @_u1K2_srt$def to i8*)
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.94308638 UTC

@s1HE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1HE_info$def to i8*)
define internal ghccc void @s1HE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967301, i64 4294967296, i32 10, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u1K2_srt_struct* @_u1K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1HE_info$def to i64)) to i32),i32 0)}>
{
n1K3:
  %ls1Hq = alloca i64, i32 1
  %ls1Ht = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c1IH
c1IH:
  %ln1K4 = load i64*, i64** %Sp_Var
  %ln1K5 = getelementptr inbounds i64, i64* %ln1K4, i32 -2
  %ln1K6 = ptrtoint i64* %ln1K5 to i64
  %ln1K7 = icmp ult i64 %ln1K6, %SpLim_Arg
  %ln1K9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1K7, i1 0 )
  br i1 %ln1K9, label %c1II, label %c1IJ
c1IJ:
  %ln1Kc = load i64, i64* %R1_Var
  %ln1Kd = add i64 %ln1Kc, 7
  %ln1Ke = inttoptr i64 %ln1Kd to i64*
  %ln1Kf = load i64, i64* %ln1Ke, !tbaa !4
  store i64 %ln1Kf, i64* %ls1Hq
  %ln1Kg = load i64, i64* %ls1Hq
  %ln1Kh = icmp sge i64 %ln1Kg, 0
  %ln1Ki = zext i1 %ln1Kh to i64
  switch i64 %ln1Ki, label %c1IW [i64 1, label %c1J9]
c1IW:
  %ln1Kk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1IO_info$def to i64
  %ln1Kj = load i64*, i64** %Sp_Var
  %ln1Kl = getelementptr inbounds i64, i64* %ln1Kj, i32 -2
  store i64 %ln1Kk, i64* %ln1Kl, !tbaa !2
  %ln1Km = load i64, i64* %R2_Var
  store i64 %ln1Km, i64* %ls1Ht
  %ln1Kn = load i64, i64* %ls1Hq
  store i64 %ln1Kn, i64* %R2_Var
  %ln1Kp = load i64, i64* %ls1Ht
  %ln1Ko = load i64*, i64** %Sp_Var
  %ln1Kq = getelementptr inbounds i64, i64* %ln1Ko, i32 -1
  store i64 %ln1Kp, i64* %ln1Kq, !tbaa !2
  %ln1Kr = load i64*, i64** %Sp_Var
  %ln1Ks = getelementptr inbounds i64, i64* %ln1Kr, i32 -2
  %ln1Kt = ptrtoint i64* %ln1Ks to i64
  %ln1Ku = inttoptr i64 %ln1Kt to i64*
  store i64* %ln1Ku, i64** %Sp_Var
  %ln1Kv = bitcast i8* @integerzmwiredzmin_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Kw = load i64*, i64** %Sp_Var
  %ln1Kx = load i64, i64* %R1_Var
  %ln1Ky = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Kv( i64* %Base_Arg, i64* %ln1Kw, i64* %Hp_Arg, i64 %ln1Kx, i64 %ln1Ky, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1J9:
  %ln1KA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1J2_info$def to i64
  %ln1Kz = load i64*, i64** %Sp_Var
  %ln1KB = getelementptr inbounds i64, i64* %ln1Kz, i32 -2
  store i64 %ln1KA, i64* %ln1KB, !tbaa !2
  %ln1KC = load i64, i64* %R2_Var
  store i64 %ln1KC, i64* %ls1Ht
  %ln1KD = load i64, i64* %ls1Hq
  store i64 %ln1KD, i64* %R2_Var
  %ln1KF = load i64, i64* %ls1Ht
  %ln1KE = load i64*, i64** %Sp_Var
  %ln1KG = getelementptr inbounds i64, i64* %ln1KE, i32 -1
  store i64 %ln1KF, i64* %ln1KG, !tbaa !2
  %ln1KH = load i64*, i64** %Sp_Var
  %ln1KI = getelementptr inbounds i64, i64* %ln1KH, i32 -2
  %ln1KJ = ptrtoint i64* %ln1KI to i64
  %ln1KK = inttoptr i64 %ln1KJ to i64*
  store i64* %ln1KK, i64** %Sp_Var
  %ln1KL = bitcast i8* @integerzmwiredzmin_GHCziIntegerziType_smallInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1KM = load i64*, i64** %Sp_Var
  %ln1KN = load i64, i64* %R1_Var
  %ln1KO = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1KL( i64* %Base_Arg, i64* %ln1KM, i64* %Hp_Arg, i64 %ln1KN, i64 %ln1KO, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1II:
  %ln1KP = load i64, i64* %R2_Var
  store i64 %ln1KP, i64* %R2_Var
  %ln1KQ = load i64, i64* %R1_Var
  store i64 %ln1KQ, i64* %R1_Var
  %ln1KR = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln1KS = bitcast i64* %ln1KR to i64*
  %ln1KT = load i64, i64* %ln1KS, !tbaa !5
  %ln1KU = inttoptr i64 %ln1KT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1KV = load i64*, i64** %Sp_Var
  %ln1KW = load i64, i64* %R1_Var
  %ln1KX = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1KU( i64* %Base_Arg, i64* %ln1KV, i64* %Hp_Arg, i64 %ln1KW, i64 %ln1KX, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2021-04-14 18:50:25.94850919 UTC

@c1J2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1J2_info$def to i8*)
define internal ghccc void @c1J2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziShow_zdwzdcshowsPrec4_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1J2_info$def to i64)) to i32),i32 0)}>
{
n1KY:
  %ls1Ht = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c1J2
c1J2:
  %ln1KZ = load i64*, i64** %Sp_Var
  %ln1L0 = getelementptr inbounds i64, i64* %ln1KZ, i32 1
  %ln1L1 = bitcast i64* %ln1L0 to i64*
  %ln1L2 = load i64, i64* %ln1L1, !tbaa !2
  store i64 %ln1L2, i64* %ls1Ht
  %ln1L4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1J6_info$def to i64
  %ln1L3 = load i64*, i64** %Sp_Var
  %ln1L5 = getelementptr inbounds i64, i64* %ln1L3, i32 1
  store i64 %ln1L4, i64* %ln1L5, !tbaa !2
  %ln1L6 = load i64, i64* %ls1Ht
  store i64 %ln1L6, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln1L7 = load i64*, i64** %Sp_Var
  %ln1L8 = getelementptr inbounds i64, i64* %ln1L7, i32 1
  %ln1L9 = ptrtoint i64* %ln1L8 to i64
  %ln1La = inttoptr i64 %ln1L9 to i64*
  store i64* %ln1La, i64** %Sp_Var
  %ln1Lb = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec4_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Lc = load i64*, i64** %Sp_Var
  %ln1Ld = load i64, i64* %R2_Var
  %ln1Le = load i64, i64* %R3_Var
  %ln1Lf = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Lb( i64* %Base_Arg, i64* %ln1Lc, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln1Ld, i64 %ln1Le, i64 %ln1Lf, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.950420686 UTC

@c1J6_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1J6_info$def to i8*)
define internal ghccc void @c1J6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n1Lg:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c1J6
c1J6:
  %ln1Lh = load i64*, i64** %Hp_Var
  %ln1Li = getelementptr inbounds i64, i64* %ln1Lh, i32 3
  %ln1Lj = ptrtoint i64* %ln1Li to i64
  %ln1Lk = inttoptr i64 %ln1Lj to i64*
  store i64* %ln1Lk, i64** %Hp_Var
  %ln1Ll = load i64*, i64** %Hp_Var
  %ln1Lm = ptrtoint i64* %ln1Ll to i64
  %ln1Ln = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1Lo = bitcast i64* %ln1Ln to i64*
  %ln1Lp = load i64, i64* %ln1Lo, !tbaa !5
  %ln1Lq = icmp ugt i64 %ln1Lm, %ln1Lp
  %ln1Lr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1Lq, i1 0 )
  br i1 %ln1Lr, label %c1Jd, label %c1Jc
c1Jc:
  %ln1Lt = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1Ls = load i64*, i64** %Hp_Var
  %ln1Lu = getelementptr inbounds i64, i64* %ln1Ls, i32 -2
  store i64 %ln1Lt, i64* %ln1Lu, !tbaa !3
  %ln1Lw = load i64, i64* %R1_Var
  %ln1Lv = load i64*, i64** %Hp_Var
  %ln1Lx = getelementptr inbounds i64, i64* %ln1Lv, i32 -1
  store i64 %ln1Lw, i64* %ln1Lx, !tbaa !3
  %ln1Lz = load i64, i64* %R2_Var
  %ln1Ly = load i64*, i64** %Hp_Var
  %ln1LA = getelementptr inbounds i64, i64* %ln1Ly, i32 0
  store i64 %ln1Lz, i64* %ln1LA, !tbaa !3
  %ln1LC = load i64*, i64** %Hp_Var
  %ln1LD = ptrtoint i64* %ln1LC to i64
  %ln1LE = add i64 %ln1LD, -14
  store i64 %ln1LE, i64* %R1_Var
  %ln1LF = load i64*, i64** %Sp_Var
  %ln1LG = getelementptr inbounds i64, i64* %ln1LF, i32 1
  %ln1LH = ptrtoint i64* %ln1LG to i64
  %ln1LI = inttoptr i64 %ln1LH to i64*
  store i64* %ln1LI, i64** %Sp_Var
  %ln1LJ = load i64*, i64** %Sp_Var
  %ln1LK = getelementptr inbounds i64, i64* %ln1LJ, i32 0
  %ln1LL = bitcast i64* %ln1LK to i64*
  %ln1LM = load i64, i64* %ln1LL, !tbaa !2
  %ln1LN = inttoptr i64 %ln1LM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1LO = load i64*, i64** %Sp_Var
  %ln1LP = load i64*, i64** %Hp_Var
  %ln1LQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1LN( i64* %Base_Arg, i64* %ln1LO, i64* %ln1LP, i64 %ln1LQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1Jd:
  %ln1LR = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln1LR, !tbaa !5
  %ln1LS = load i64, i64* %R2_Var
  store i64 %ln1LS, i64* %R2_Var
  %ln1LT = load i64, i64* %R1_Var
  store i64 %ln1LT, i64* %R1_Var
  %ln1LU = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1LV = load i64*, i64** %Sp_Var
  %ln1LW = load i64*, i64** %Hp_Var
  %ln1LX = load i64, i64* %R1_Var
  %ln1LY = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1LU( i64* %Base_Arg, i64* %ln1LV, i64* %ln1LW, i64 %ln1LX, i64 %ln1LY, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.952631381 UTC

@c1IO_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1IO_info$def to i8*)
define internal ghccc void @c1IO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziShow_zdwzdcshowsPrec4_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1IO_info$def to i64)) to i32),i32 0)}>
{
n1LZ:
  %ls1Ht = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c1IO
c1IO:
  %ln1M0 = load i64*, i64** %Sp_Var
  %ln1M1 = getelementptr inbounds i64, i64* %ln1M0, i32 1
  %ln1M2 = bitcast i64* %ln1M1 to i64*
  %ln1M3 = load i64, i64* %ln1M2, !tbaa !2
  store i64 %ln1M3, i64* %ls1Ht
  %ln1M5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1IS_info$def to i64
  %ln1M4 = load i64*, i64** %Sp_Var
  %ln1M6 = getelementptr inbounds i64, i64* %ln1M4, i32 1
  store i64 %ln1M5, i64* %ln1M6, !tbaa !2
  %ln1M7 = load i64, i64* %ls1Ht
  store i64 %ln1M7, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln1M8 = load i64*, i64** %Sp_Var
  %ln1M9 = getelementptr inbounds i64, i64* %ln1M8, i32 1
  %ln1Ma = ptrtoint i64* %ln1M9 to i64
  %ln1Mb = inttoptr i64 %ln1Ma to i64*
  store i64* %ln1Mb, i64** %Sp_Var
  %ln1Mc = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec4_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Md = load i64*, i64** %Sp_Var
  %ln1Me = load i64, i64* %R2_Var
  %ln1Mf = load i64, i64* %R3_Var
  %ln1Mg = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Mc( i64* %Base_Arg, i64* %ln1Md, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln1Me, i64 %ln1Mf, i64 %ln1Mg, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.954477531 UTC

@c1IS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1IS_info$def to i8*)
define internal ghccc void @c1IS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n1Mh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c1IS
c1IS:
  %ln1Mi = load i64*, i64** %Hp_Var
  %ln1Mj = getelementptr inbounds i64, i64* %ln1Mi, i32 3
  %ln1Mk = ptrtoint i64* %ln1Mj to i64
  %ln1Ml = inttoptr i64 %ln1Mk to i64*
  store i64* %ln1Ml, i64** %Hp_Var
  %ln1Mm = load i64*, i64** %Hp_Var
  %ln1Mn = ptrtoint i64* %ln1Mm to i64
  %ln1Mo = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1Mp = bitcast i64* %ln1Mo to i64*
  %ln1Mq = load i64, i64* %ln1Mp, !tbaa !5
  %ln1Mr = icmp ugt i64 %ln1Mn, %ln1Mq
  %ln1Ms = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1Mr, i1 0 )
  br i1 %ln1Ms, label %c1J0, label %c1IZ
c1IZ:
  %ln1Mu = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1Mt = load i64*, i64** %Hp_Var
  %ln1Mv = getelementptr inbounds i64, i64* %ln1Mt, i32 -2
  store i64 %ln1Mu, i64* %ln1Mv, !tbaa !3
  %ln1Mx = load i64, i64* %R1_Var
  %ln1Mw = load i64*, i64** %Hp_Var
  %ln1My = getelementptr inbounds i64, i64* %ln1Mw, i32 -1
  store i64 %ln1Mx, i64* %ln1My, !tbaa !3
  %ln1MA = load i64, i64* %R2_Var
  %ln1Mz = load i64*, i64** %Hp_Var
  %ln1MB = getelementptr inbounds i64, i64* %ln1Mz, i32 0
  store i64 %ln1MA, i64* %ln1MB, !tbaa !3
  %ln1MD = load i64*, i64** %Hp_Var
  %ln1ME = ptrtoint i64* %ln1MD to i64
  %ln1MF = add i64 %ln1ME, -14
  store i64 %ln1MF, i64* %R1_Var
  %ln1MG = load i64*, i64** %Sp_Var
  %ln1MH = getelementptr inbounds i64, i64* %ln1MG, i32 1
  %ln1MI = ptrtoint i64* %ln1MH to i64
  %ln1MJ = inttoptr i64 %ln1MI to i64*
  store i64* %ln1MJ, i64** %Sp_Var
  %ln1MK = load i64*, i64** %Sp_Var
  %ln1ML = getelementptr inbounds i64, i64* %ln1MK, i32 0
  %ln1MM = bitcast i64* %ln1ML to i64*
  %ln1MN = load i64, i64* %ln1MM, !tbaa !2
  %ln1MO = inttoptr i64 %ln1MN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1MP = load i64*, i64** %Sp_Var
  %ln1MQ = load i64*, i64** %Hp_Var
  %ln1MR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1MO( i64* %Base_Arg, i64* %ln1MP, i64* %ln1MQ, i64 %ln1MR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1J0:
  %ln1MS = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln1MS, !tbaa !5
  %ln1MT = load i64, i64* %R2_Var
  store i64 %ln1MT, i64* %R2_Var
  %ln1MU = load i64, i64* %R1_Var
  store i64 %ln1MU, i64* %R1_Var
  %ln1MV = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1MW = load i64*, i64** %Sp_Var
  %ln1MX = load i64*, i64** %Hp_Var
  %ln1MY = load i64, i64* %R1_Var
  %ln1MZ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1MV( i64* %Base_Arg, i64* %ln1MW, i64* %ln1MX, i64 %ln1MY, i64 %ln1MZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.957191793 UTC

@s1Hs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1Hs_info$def to i8*)
define internal ghccc void @s1Hs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 4294967296, i32 17, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u1K2_srt_struct* @_u1K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1Hs_info$def to i64)) to i32),i32 0)}>
{
n1N0:
  %ls1Hs = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls1Hq = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c1Je
c1Je:
  %ln1N1 = load i64, i64* %R1_Var
  store i64 %ln1N1, i64* %ls1Hs
  %ln1N2 = load i64*, i64** %Sp_Var
  %ln1N3 = getelementptr inbounds i64, i64* %ln1N2, i32 -2
  %ln1N4 = ptrtoint i64* %ln1N3 to i64
  %ln1N5 = icmp ult i64 %ln1N4, %SpLim_Arg
  %ln1N6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1N5, i1 0 )
  br i1 %ln1N6, label %c1Jf, label %c1Jg
c1Jg:
  %ln1N7 = load i64*, i64** %Hp_Var
  %ln1N8 = getelementptr inbounds i64, i64* %ln1N7, i32 2
  %ln1N9 = ptrtoint i64* %ln1N8 to i64
  %ln1Na = inttoptr i64 %ln1N9 to i64*
  store i64* %ln1Na, i64** %Hp_Var
  %ln1Nb = load i64*, i64** %Hp_Var
  %ln1Nc = ptrtoint i64* %ln1Nb to i64
  %ln1Nd = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1Ne = bitcast i64* %ln1Nd to i64*
  %ln1Nf = load i64, i64* %ln1Ne, !tbaa !5
  %ln1Ng = icmp ugt i64 %ln1Nc, %ln1Nf
  %ln1Nh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1Ng, i1 0 )
  br i1 %ln1Nh, label %c1Ji, label %c1Jh
c1Jh:
  %ln1Nj = ptrtoint i8* @stg_upd_frame_info to i64
  %ln1Ni = load i64*, i64** %Sp_Var
  %ln1Nk = getelementptr inbounds i64, i64* %ln1Ni, i32 -2
  store i64 %ln1Nj, i64* %ln1Nk, !tbaa !2
  %ln1Nm = load i64, i64* %ls1Hs
  %ln1Nl = load i64*, i64** %Sp_Var
  %ln1Nn = getelementptr inbounds i64, i64* %ln1Nl, i32 -1
  store i64 %ln1Nm, i64* %ln1Nn, !tbaa !2
  %ln1No = load i64, i64* %ls1Hs
  %ln1Np = add i64 %ln1No, 16
  %ln1Nq = inttoptr i64 %ln1Np to i64*
  %ln1Nr = load i64, i64* %ln1Nq, !tbaa !1
  store i64 %ln1Nr, i64* %ls1Hq
  %ln1Nt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1HE_info$def to i64
  %ln1Ns = load i64*, i64** %Hp_Var
  %ln1Nu = getelementptr inbounds i64, i64* %ln1Ns, i32 -1
  store i64 %ln1Nt, i64* %ln1Nu, !tbaa !3
  %ln1Nw = load i64, i64* %ls1Hq
  %ln1Nv = load i64*, i64** %Hp_Var
  %ln1Nx = getelementptr inbounds i64, i64* %ln1Nv, i32 0
  store i64 %ln1Nw, i64* %ln1Nx, !tbaa !3
  %ln1Ny = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln1Nz = add i64 %ln1Ny, 1
  store i64 %ln1Nz, i64* %R4_Var
  %ln1NB = load i64*, i64** %Hp_Var
  %ln1NC = ptrtoint i64* %ln1NB to i64
  %ln1ND = add i64 %ln1NC, -7
  store i64 %ln1ND, i64* %R3_Var
  %ln1NE = ptrtoint %Main_main2_closure_struct* @Main_main2_closure$def to i64
  %ln1NF = add i64 %ln1NE, 2
  store i64 %ln1NF, i64* %R2_Var
  %ln1NG = load i64*, i64** %Sp_Var
  %ln1NH = getelementptr inbounds i64, i64* %ln1NG, i32 -2
  %ln1NI = ptrtoint i64* %ln1NH to i64
  %ln1NJ = inttoptr i64 %ln1NI to i64*
  store i64* %ln1NJ, i64** %Sp_Var
  %ln1NK = bitcast i8* @base_GHCziShow_zdfShowZLz2cUZRzuzdsgo1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1NL = load i64*, i64** %Sp_Var
  %ln1NM = load i64*, i64** %Hp_Var
  %ln1NN = load i64, i64* %R1_Var
  %ln1NO = load i64, i64* %R2_Var
  %ln1NP = load i64, i64* %R3_Var
  %ln1NQ = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1NK( i64* %Base_Arg, i64* %ln1NL, i64* %ln1NM, i64 %ln1NN, i64 %ln1NO, i64 %ln1NP, i64 %ln1NQ, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1Ji:
  %ln1NR = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln1NR, !tbaa !5
  br label %c1Jf
c1Jf:
  %ln1NS = load i64, i64* %ls1Hs
  store i64 %ln1NS, i64* %R1_Var
  %ln1NT = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln1NU = bitcast i64* %ln1NT to i64*
  %ln1NV = load i64, i64* %ln1NU, !tbaa !5
  %ln1NW = inttoptr i64 %ln1NV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1NX = load i64*, i64** %Sp_Var
  %ln1NY = load i64*, i64** %Hp_Var
  %ln1NZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1NW( i64* %Base_Arg, i64* %ln1NX, i64* %ln1NY, i64 %ln1NZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.961010161 UTC

@s1HQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1HQ_info$def to i8*)
define internal ghccc void @s1HQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 8589934592, i32 20, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u1K2_srt_struct* @_u1K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1HQ_info$def to i64)) to i32),i32 0)}>
{
n1O0:
  %ls1HQ = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls1Hq = alloca i64, i32 1
  %ls1Hp = alloca i64, i32 1
  %lc1Iw = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c1Jj
c1Jj:
  %ln1O1 = load i64, i64* %R1_Var
  store i64 %ln1O1, i64* %ls1HQ
  %ln1O2 = load i64*, i64** %Sp_Var
  %ln1O3 = getelementptr inbounds i64, i64* %ln1O2, i32 -4
  %ln1O4 = ptrtoint i64* %ln1O3 to i64
  %ln1O5 = icmp ult i64 %ln1O4, %SpLim_Arg
  %ln1O6 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1O5, i1 0 )
  br i1 %ln1O6, label %c1Jk, label %c1Jl
c1Jl:
  %ln1O7 = load i64*, i64** %Hp_Var
  %ln1O8 = getelementptr inbounds i64, i64* %ln1O7, i32 6
  %ln1O9 = ptrtoint i64* %ln1O8 to i64
  %ln1Oa = inttoptr i64 %ln1O9 to i64*
  store i64* %ln1Oa, i64** %Hp_Var
  %ln1Ob = load i64*, i64** %Hp_Var
  %ln1Oc = ptrtoint i64* %ln1Ob to i64
  %ln1Od = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1Oe = bitcast i64* %ln1Od to i64*
  %ln1Of = load i64, i64* %ln1Oe, !tbaa !5
  %ln1Og = icmp ugt i64 %ln1Oc, %ln1Of
  %ln1Oh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1Og, i1 0 )
  br i1 %ln1Oh, label %c1Jn, label %c1Jm
c1Jm:
  %ln1Oj = ptrtoint i8* @stg_upd_frame_info to i64
  %ln1Oi = load i64*, i64** %Sp_Var
  %ln1Ok = getelementptr inbounds i64, i64* %ln1Oi, i32 -2
  store i64 %ln1Oj, i64* %ln1Ok, !tbaa !2
  %ln1Om = load i64, i64* %ls1HQ
  %ln1Ol = load i64*, i64** %Sp_Var
  %ln1On = getelementptr inbounds i64, i64* %ln1Ol, i32 -1
  store i64 %ln1Om, i64* %ln1On, !tbaa !2
  %ln1Oo = load i64, i64* %ls1HQ
  %ln1Op = add i64 %ln1Oo, 16
  %ln1Oq = inttoptr i64 %ln1Op to i64*
  %ln1Or = load i64, i64* %ln1Oq, !tbaa !1
  store i64 %ln1Or, i64* %ls1Hq
  %ln1Os = load i64, i64* %ls1HQ
  %ln1Ot = add i64 %ln1Os, 24
  %ln1Ou = inttoptr i64 %ln1Ot to i64*
  %ln1Ov = load i64, i64* %ln1Ou, !tbaa !1
  store i64 %ln1Ov, i64* %ls1Hp
  %ln1Ox = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1Hs_info$def to i64
  %ln1Ow = load i64*, i64** %Hp_Var
  %ln1Oy = getelementptr inbounds i64, i64* %ln1Ow, i32 -5
  store i64 %ln1Ox, i64* %ln1Oy, !tbaa !3
  %ln1OA = load i64, i64* %ls1Hq
  %ln1Oz = load i64*, i64** %Hp_Var
  %ln1OB = getelementptr inbounds i64, i64* %ln1Oz, i32 -3
  store i64 %ln1OA, i64* %ln1OB, !tbaa !3
  %ln1OC = load i64*, i64** %Hp_Var
  %ln1OD = getelementptr inbounds i64, i64* %ln1OC, i32 -5
  %ln1OE = ptrtoint i64* %ln1OD to i64
  store i64 %ln1OE, i64* %lc1Iw
  %ln1OF = load i64, i64* %ls1Hp
  %ln1OG = icmp sge i64 %ln1OF, 0
  %ln1OH = zext i1 %ln1OG to i64
  switch i64 %ln1OH, label %c1JA [i64 1, label %c1JO]
c1JA:
  %ln1OJ = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1OI = load i64*, i64** %Hp_Var
  %ln1OK = getelementptr inbounds i64, i64* %ln1OI, i32 -2
  store i64 %ln1OJ, i64* %ln1OK, !tbaa !3
  %ln1OM = ptrtoint i8* @base_GHCziShow_showListzuzu1_closure to i64
  %ln1OL = load i64*, i64** %Hp_Var
  %ln1ON = getelementptr inbounds i64, i64* %ln1OL, i32 -1
  store i64 %ln1OM, i64* %ln1ON, !tbaa !3
  %ln1OP = load i64, i64* %lc1Iw
  %ln1OO = load i64*, i64** %Hp_Var
  %ln1OQ = getelementptr inbounds i64, i64* %ln1OO, i32 0
  store i64 %ln1OP, i64* %ln1OQ, !tbaa !3
  %ln1OS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Js_info$def to i64
  %ln1OR = load i64*, i64** %Sp_Var
  %ln1OT = getelementptr inbounds i64, i64* %ln1OR, i32 -4
  store i64 %ln1OS, i64* %ln1OT, !tbaa !2
  %ln1OU = load i64, i64* %ls1Hp
  store i64 %ln1OU, i64* %R2_Var
  %ln1OX = load i64*, i64** %Hp_Var
  %ln1OY = ptrtoint i64* %ln1OX to i64
  %ln1OZ = add i64 %ln1OY, -14
  %ln1OV = load i64*, i64** %Sp_Var
  %ln1P0 = getelementptr inbounds i64, i64* %ln1OV, i32 -3
  store i64 %ln1OZ, i64* %ln1P0, !tbaa !2
  %ln1P1 = load i64*, i64** %Sp_Var
  %ln1P2 = getelementptr inbounds i64, i64* %ln1P1, i32 -4
  %ln1P3 = ptrtoint i64* %ln1P2 to i64
  %ln1P4 = inttoptr i64 %ln1P3 to i64*
  store i64* %ln1P4, i64** %Sp_Var
  %ln1P5 = bitcast i8* @integerzmwiredzmin_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1P6 = load i64*, i64** %Sp_Var
  %ln1P7 = load i64*, i64** %Hp_Var
  %ln1P8 = load i64, i64* %R1_Var
  %ln1P9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1P5( i64* %Base_Arg, i64* %ln1P6, i64* %ln1P7, i64 %ln1P8, i64 %ln1P9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1JO:
  %ln1Pb = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1Pa = load i64*, i64** %Hp_Var
  %ln1Pc = getelementptr inbounds i64, i64* %ln1Pa, i32 -2
  store i64 %ln1Pb, i64* %ln1Pc, !tbaa !3
  %ln1Pe = ptrtoint i8* @base_GHCziShow_showListzuzu1_closure to i64
  %ln1Pd = load i64*, i64** %Hp_Var
  %ln1Pf = getelementptr inbounds i64, i64* %ln1Pd, i32 -1
  store i64 %ln1Pe, i64* %ln1Pf, !tbaa !3
  %ln1Ph = load i64, i64* %lc1Iw
  %ln1Pg = load i64*, i64** %Hp_Var
  %ln1Pi = getelementptr inbounds i64, i64* %ln1Pg, i32 0
  store i64 %ln1Ph, i64* %ln1Pi, !tbaa !3
  %ln1Pk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1JH_info$def to i64
  %ln1Pj = load i64*, i64** %Sp_Var
  %ln1Pl = getelementptr inbounds i64, i64* %ln1Pj, i32 -4
  store i64 %ln1Pk, i64* %ln1Pl, !tbaa !2
  %ln1Pm = load i64, i64* %ls1Hp
  store i64 %ln1Pm, i64* %R2_Var
  %ln1Pp = load i64*, i64** %Hp_Var
  %ln1Pq = ptrtoint i64* %ln1Pp to i64
  %ln1Pr = add i64 %ln1Pq, -14
  %ln1Pn = load i64*, i64** %Sp_Var
  %ln1Ps = getelementptr inbounds i64, i64* %ln1Pn, i32 -3
  store i64 %ln1Pr, i64* %ln1Ps, !tbaa !2
  %ln1Pt = load i64*, i64** %Sp_Var
  %ln1Pu = getelementptr inbounds i64, i64* %ln1Pt, i32 -4
  %ln1Pv = ptrtoint i64* %ln1Pu to i64
  %ln1Pw = inttoptr i64 %ln1Pv to i64*
  store i64* %ln1Pw, i64** %Sp_Var
  %ln1Px = bitcast i8* @integerzmwiredzmin_GHCziIntegerziType_smallInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Py = load i64*, i64** %Sp_Var
  %ln1Pz = load i64*, i64** %Hp_Var
  %ln1PA = load i64, i64* %R1_Var
  %ln1PB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Px( i64* %Base_Arg, i64* %ln1Py, i64* %ln1Pz, i64 %ln1PA, i64 %ln1PB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1Jn:
  %ln1PC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln1PC, !tbaa !5
  br label %c1Jk
c1Jk:
  %ln1PD = load i64, i64* %ls1HQ
  store i64 %ln1PD, i64* %R1_Var
  %ln1PE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln1PF = bitcast i64* %ln1PE to i64*
  %ln1PG = load i64, i64* %ln1PF, !tbaa !5
  %ln1PH = inttoptr i64 %ln1PG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1PI = load i64*, i64** %Sp_Var
  %ln1PJ = load i64*, i64** %Hp_Var
  %ln1PK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1PH( i64* %Base_Arg, i64* %ln1PI, i64* %ln1PJ, i64 %ln1PK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.966071182 UTC

@c1JH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1JH_info$def to i8*)
define internal ghccc void @c1JH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziShow_zdwzdcshowsPrec4_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1JH_info$def to i64)) to i32),i32 0)}>
{
n1PL:
  %lc1JG = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c1JH
c1JH:
  %ln1PM = load i64*, i64** %Sp_Var
  %ln1PN = getelementptr inbounds i64, i64* %ln1PM, i32 1
  %ln1PO = bitcast i64* %ln1PN to i64*
  %ln1PP = load i64, i64* %ln1PO, !tbaa !2
  store i64 %ln1PP, i64* %lc1JG
  %ln1PR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1JL_info$def to i64
  %ln1PQ = load i64*, i64** %Sp_Var
  %ln1PS = getelementptr inbounds i64, i64* %ln1PQ, i32 1
  store i64 %ln1PR, i64* %ln1PS, !tbaa !2
  %ln1PT = load i64, i64* %lc1JG
  store i64 %ln1PT, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln1PU = load i64*, i64** %Sp_Var
  %ln1PV = getelementptr inbounds i64, i64* %ln1PU, i32 1
  %ln1PW = ptrtoint i64* %ln1PV to i64
  %ln1PX = inttoptr i64 %ln1PW to i64*
  store i64* %ln1PX, i64** %Sp_Var
  %ln1PY = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec4_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1PZ = load i64*, i64** %Sp_Var
  %ln1Q0 = load i64, i64* %R2_Var
  %ln1Q1 = load i64, i64* %R3_Var
  %ln1Q2 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1PY( i64* %Base_Arg, i64* %ln1PZ, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln1Q0, i64 %ln1Q1, i64 %ln1Q2, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.967961837 UTC

@c1JL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1JL_info$def to i8*)
define internal ghccc void @c1JL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n1Q3:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c1JL
c1JL:
  %ln1Q4 = load i64*, i64** %Hp_Var
  %ln1Q5 = getelementptr inbounds i64, i64* %ln1Q4, i32 3
  %ln1Q6 = ptrtoint i64* %ln1Q5 to i64
  %ln1Q7 = inttoptr i64 %ln1Q6 to i64*
  store i64* %ln1Q7, i64** %Hp_Var
  %ln1Q8 = load i64*, i64** %Hp_Var
  %ln1Q9 = ptrtoint i64* %ln1Q8 to i64
  %ln1Qa = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1Qb = bitcast i64* %ln1Qa to i64*
  %ln1Qc = load i64, i64* %ln1Qb, !tbaa !5
  %ln1Qd = icmp ugt i64 %ln1Q9, %ln1Qc
  %ln1Qe = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1Qd, i1 0 )
  br i1 %ln1Qe, label %c1JS, label %c1JR
c1JR:
  %ln1Qg = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1Qf = load i64*, i64** %Hp_Var
  %ln1Qh = getelementptr inbounds i64, i64* %ln1Qf, i32 -2
  store i64 %ln1Qg, i64* %ln1Qh, !tbaa !3
  %ln1Qj = load i64, i64* %R1_Var
  %ln1Qi = load i64*, i64** %Hp_Var
  %ln1Qk = getelementptr inbounds i64, i64* %ln1Qi, i32 -1
  store i64 %ln1Qj, i64* %ln1Qk, !tbaa !3
  %ln1Qm = load i64, i64* %R2_Var
  %ln1Ql = load i64*, i64** %Hp_Var
  %ln1Qn = getelementptr inbounds i64, i64* %ln1Ql, i32 0
  store i64 %ln1Qm, i64* %ln1Qn, !tbaa !3
  %ln1Qp = load i64*, i64** %Hp_Var
  %ln1Qq = ptrtoint i64* %ln1Qp to i64
  %ln1Qr = add i64 %ln1Qq, -14
  store i64 %ln1Qr, i64* %R1_Var
  %ln1Qs = load i64*, i64** %Sp_Var
  %ln1Qt = getelementptr inbounds i64, i64* %ln1Qs, i32 1
  %ln1Qu = ptrtoint i64* %ln1Qt to i64
  %ln1Qv = inttoptr i64 %ln1Qu to i64*
  store i64* %ln1Qv, i64** %Sp_Var
  %ln1Qw = load i64*, i64** %Sp_Var
  %ln1Qx = getelementptr inbounds i64, i64* %ln1Qw, i32 0
  %ln1Qy = bitcast i64* %ln1Qx to i64*
  %ln1Qz = load i64, i64* %ln1Qy, !tbaa !2
  %ln1QA = inttoptr i64 %ln1Qz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1QB = load i64*, i64** %Sp_Var
  %ln1QC = load i64*, i64** %Hp_Var
  %ln1QD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1QA( i64* %Base_Arg, i64* %ln1QB, i64* %ln1QC, i64 %ln1QD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1JS:
  %ln1QE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln1QE, !tbaa !5
  %ln1QF = load i64, i64* %R2_Var
  store i64 %ln1QF, i64* %R2_Var
  %ln1QG = load i64, i64* %R1_Var
  store i64 %ln1QG, i64* %R1_Var
  %ln1QH = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1QI = load i64*, i64** %Sp_Var
  %ln1QJ = load i64*, i64** %Hp_Var
  %ln1QK = load i64, i64* %R1_Var
  %ln1QL = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1QH( i64* %Base_Arg, i64* %ln1QI, i64* %ln1QJ, i64 %ln1QK, i64 %ln1QL, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.970150975 UTC

@c1Js_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Js_info$def to i8*)
define internal ghccc void @c1Js_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 1, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (i8* @base_GHCziShow_zdwzdcshowsPrec4_closure to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Js_info$def to i64)) to i32),i32 0)}>
{
n1QM:
  %lc1Jr = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c1Js
c1Js:
  %ln1QN = load i64*, i64** %Sp_Var
  %ln1QO = getelementptr inbounds i64, i64* %ln1QN, i32 1
  %ln1QP = bitcast i64* %ln1QO to i64*
  %ln1QQ = load i64, i64* %ln1QP, !tbaa !2
  store i64 %ln1QQ, i64* %lc1Jr
  %ln1QS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Jw_info$def to i64
  %ln1QR = load i64*, i64** %Sp_Var
  %ln1QT = getelementptr inbounds i64, i64* %ln1QR, i32 1
  store i64 %ln1QS, i64* %ln1QT, !tbaa !2
  %ln1QU = load i64, i64* %lc1Jr
  store i64 %ln1QU, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln1QV = load i64*, i64** %Sp_Var
  %ln1QW = getelementptr inbounds i64, i64* %ln1QV, i32 1
  %ln1QX = ptrtoint i64* %ln1QW to i64
  %ln1QY = inttoptr i64 %ln1QX to i64*
  store i64* %ln1QY, i64** %Sp_Var
  %ln1QZ = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec4_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1R0 = load i64*, i64** %Sp_Var
  %ln1R1 = load i64, i64* %R2_Var
  %ln1R2 = load i64, i64* %R3_Var
  %ln1R3 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1QZ( i64* %Base_Arg, i64* %ln1R0, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln1R1, i64 %ln1R2, i64 %ln1R3, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.972016189 UTC

@c1Jw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Jw_info$def to i8*)
define internal ghccc void @c1Jw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 0}>
{
n1R4:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  br label %c1Jw
c1Jw:
  %ln1R5 = load i64*, i64** %Hp_Var
  %ln1R6 = getelementptr inbounds i64, i64* %ln1R5, i32 3
  %ln1R7 = ptrtoint i64* %ln1R6 to i64
  %ln1R8 = inttoptr i64 %ln1R7 to i64*
  store i64* %ln1R8, i64** %Hp_Var
  %ln1R9 = load i64*, i64** %Hp_Var
  %ln1Ra = ptrtoint i64* %ln1R9 to i64
  %ln1Rb = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1Rc = bitcast i64* %ln1Rb to i64*
  %ln1Rd = load i64, i64* %ln1Rc, !tbaa !5
  %ln1Re = icmp ugt i64 %ln1Ra, %ln1Rd
  %ln1Rf = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1Re, i1 0 )
  br i1 %ln1Rf, label %c1JE, label %c1JD
c1JD:
  %ln1Rh = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1Rg = load i64*, i64** %Hp_Var
  %ln1Ri = getelementptr inbounds i64, i64* %ln1Rg, i32 -2
  store i64 %ln1Rh, i64* %ln1Ri, !tbaa !3
  %ln1Rk = load i64, i64* %R1_Var
  %ln1Rj = load i64*, i64** %Hp_Var
  %ln1Rl = getelementptr inbounds i64, i64* %ln1Rj, i32 -1
  store i64 %ln1Rk, i64* %ln1Rl, !tbaa !3
  %ln1Rn = load i64, i64* %R2_Var
  %ln1Rm = load i64*, i64** %Hp_Var
  %ln1Ro = getelementptr inbounds i64, i64* %ln1Rm, i32 0
  store i64 %ln1Rn, i64* %ln1Ro, !tbaa !3
  %ln1Rq = load i64*, i64** %Hp_Var
  %ln1Rr = ptrtoint i64* %ln1Rq to i64
  %ln1Rs = add i64 %ln1Rr, -14
  store i64 %ln1Rs, i64* %R1_Var
  %ln1Rt = load i64*, i64** %Sp_Var
  %ln1Ru = getelementptr inbounds i64, i64* %ln1Rt, i32 1
  %ln1Rv = ptrtoint i64* %ln1Ru to i64
  %ln1Rw = inttoptr i64 %ln1Rv to i64*
  store i64* %ln1Rw, i64** %Sp_Var
  %ln1Rx = load i64*, i64** %Sp_Var
  %ln1Ry = getelementptr inbounds i64, i64* %ln1Rx, i32 0
  %ln1Rz = bitcast i64* %ln1Ry to i64*
  %ln1RA = load i64, i64* %ln1Rz, !tbaa !2
  %ln1RB = inttoptr i64 %ln1RA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1RC = load i64*, i64** %Sp_Var
  %ln1RD = load i64*, i64** %Hp_Var
  %ln1RE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1RB( i64* %Base_Arg, i64* %ln1RC, i64* %ln1RD, i64 %ln1RE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1JE:
  %ln1RF = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln1RF, !tbaa !5
  %ln1RG = load i64, i64* %R2_Var
  store i64 %ln1RG, i64* %R2_Var
  %ln1RH = load i64, i64* %R1_Var
  store i64 %ln1RH, i64* %R1_Var
  %ln1RI = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1RJ = load i64*, i64** %Sp_Var
  %ln1RK = load i64*, i64** %Hp_Var
  %ln1RL = load i64, i64* %R1_Var
  %ln1RM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1RI( i64* %Base_Arg, i64* %ln1RJ, i64* %ln1RK, i64 %ln1RL, i64 %ln1RM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.974911457 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 21, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u1K2_srt_struct* @_u1K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)) to i32),i32 0)}>
{
n1RN:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc1Ii = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  br label %c1JU
c1JU:
  %ln1RO = load i64*, i64** %Sp_Var
  %ln1RP = getelementptr inbounds i64, i64* %ln1RO, i32 -5
  %ln1RQ = ptrtoint i64* %ln1RP to i64
  %ln1RR = icmp ult i64 %ln1RQ, %SpLim_Arg
  %ln1RS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1RR, i1 0 )
  br i1 %ln1RS, label %c1JV, label %c1JW
c1JW:
  %ln1RT = ptrtoint i64* %Base_Arg to i64
  %ln1RU = inttoptr i64 %ln1RT to i8*
  %ln1RV = load i64, i64* %R1_Var
  %ln1RW = inttoptr i64 %ln1RV to i8*
  %ln1RX = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln1RY = call ccc i8* (i8*, i8*) %ln1RX( i8* %ln1RU, i8* %ln1RW ) nounwind
  %ln1RZ = ptrtoint i8* %ln1RY to i64
  store i64 %ln1RZ, i64* %lc1Ii
  %ln1S0 = load i64, i64* %lc1Ii
  %ln1S1 = icmp eq i64 %ln1S0, 0
  br i1 %ln1S1, label %c1Ik, label %c1Ij
c1Ij:
  %ln1S3 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln1S2 = load i64*, i64** %Sp_Var
  %ln1S4 = getelementptr inbounds i64, i64* %ln1S2, i32 -2
  store i64 %ln1S3, i64* %ln1S4, !tbaa !2
  %ln1S6 = load i64, i64* %lc1Ii
  %ln1S5 = load i64*, i64** %Sp_Var
  %ln1S7 = getelementptr inbounds i64, i64* %ln1S5, i32 -1
  store i64 %ln1S6, i64* %ln1S7, !tbaa !2
  %ln1S9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Il_info$def to i64
  %ln1S8 = load i64*, i64** %Sp_Var
  %ln1Sa = getelementptr inbounds i64, i64* %ln1S8, i32 -3
  store i64 %ln1S9, i64* %ln1Sa, !tbaa !2
  store i64 2, i64* %R2_Var
  %ln1Sb = load i64*, i64** %Sp_Var
  %ln1Sc = getelementptr inbounds i64, i64* %ln1Sb, i32 -3
  %ln1Sd = ptrtoint i64* %ln1Sc to i64
  %ln1Se = inttoptr i64 %ln1Sd to i64*
  store i64* %ln1Se, i64** %Sp_Var
  %ln1Sf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_test_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Sg = load i64*, i64** %Sp_Var
  %ln1Sh = load i64, i64* %R1_Var
  %ln1Si = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Sf( i64* %Base_Arg, i64* %ln1Sg, i64* %Hp_Arg, i64 %ln1Sh, i64 %ln1Si, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1Ik:
  %ln1Sk = load i64, i64* %R1_Var
  %ln1Sl = inttoptr i64 %ln1Sk to i64*
  %ln1Sm = load i64, i64* %ln1Sl, !tbaa !4
  %ln1Sn = inttoptr i64 %ln1Sm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1So = load i64*, i64** %Sp_Var
  %ln1Sp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Sn( i64* %Base_Arg, i64* %ln1So, i64* %Hp_Arg, i64 %ln1Sp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1JV:
  %ln1Sq = load i64, i64* %R1_Var
  store i64 %ln1Sq, i64* %R1_Var
  %ln1Sr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln1Ss = bitcast i64* %ln1Sr to i64*
  %ln1St = load i64, i64* %ln1Ss, !tbaa !5
  %ln1Su = inttoptr i64 %ln1St to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Sv = load i64*, i64** %Sp_Var
  %ln1Sw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Su( i64* %Base_Arg, i64* %ln1Sv, i64* %Hp_Arg, i64 %ln1Sw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.977699098 UTC

@c1Il_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Il_info$def to i8*)
define internal ghccc void @c1Il_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 0, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u1K2_srt_struct* @_u1K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Il_info$def to i64)) to i32),i32 0)}>
{
n1Sx:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c1Il
c1Il:
  %ln1Sy = load i64*, i64** %Sp_Var
  %ln1Sz = getelementptr inbounds i64, i64* %ln1Sy, i32 -1
  store i64 %R2_Arg, i64* %ln1Sz, !tbaa !2
  %ln1SA = load i64*, i64** %Sp_Var
  %ln1SB = getelementptr inbounds i64, i64* %ln1SA, i32 0
  store i64 %R1_Arg, i64* %ln1SB, !tbaa !2
  %ln1SC = load i64*, i64** %Sp_Var
  %ln1SD = getelementptr inbounds i64, i64* %ln1SC, i32 -2
  %ln1SE = ptrtoint i64* %ln1SD to i64
  %ln1SF = inttoptr i64 %ln1SE to i64*
  store i64* %ln1SF, i64** %Sp_Var
  %ln1SG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Im_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1SH = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1SG( i64* %Base_Arg, i64* %ln1SH, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.980087114 UTC

@c1Im_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Im_info$def to i8*)
define internal ghccc void @c1Im_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 194, i32 30, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%_u1K2_srt_struct* @_u1K2_srt$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Im_info$def to i64)) to i32),i32 0)}>
{
n1SI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  br label %c1Im
c1Im:
  %ln1SJ = load i64*, i64** %Hp_Var
  %ln1SK = getelementptr inbounds i64, i64* %ln1SJ, i32 7
  %ln1SL = ptrtoint i64* %ln1SK to i64
  %ln1SM = inttoptr i64 %ln1SL to i64*
  store i64* %ln1SM, i64** %Hp_Var
  %ln1SN = load i64*, i64** %Hp_Var
  %ln1SO = ptrtoint i64* %ln1SN to i64
  %ln1SP = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln1SQ = bitcast i64* %ln1SP to i64*
  %ln1SR = load i64, i64* %ln1SQ, !tbaa !5
  %ln1SS = icmp ugt i64 %ln1SO, %ln1SR
  %ln1ST = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1SS, i1 0 )
  br i1 %ln1ST, label %c1JZ, label %c1JY
c1JY:
  %ln1SV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s1HQ_info$def to i64
  %ln1SU = load i64*, i64** %Hp_Var
  %ln1SW = getelementptr inbounds i64, i64* %ln1SU, i32 -6
  store i64 %ln1SV, i64* %ln1SW, !tbaa !3
  %ln1SY = load i64*, i64** %Sp_Var
  %ln1SZ = getelementptr inbounds i64, i64* %ln1SY, i32 1
  %ln1T0 = bitcast i64* %ln1SZ to i64*
  %ln1T1 = load i64, i64* %ln1T0, !tbaa !2
  %ln1SX = load i64*, i64** %Hp_Var
  %ln1T2 = getelementptr inbounds i64, i64* %ln1SX, i32 -4
  store i64 %ln1T1, i64* %ln1T2, !tbaa !3
  %ln1T4 = load i64*, i64** %Sp_Var
  %ln1T5 = getelementptr inbounds i64, i64* %ln1T4, i32 2
  %ln1T6 = bitcast i64* %ln1T5 to i64*
  %ln1T7 = load i64, i64* %ln1T6, !tbaa !2
  %ln1T3 = load i64*, i64** %Hp_Var
  %ln1T8 = getelementptr inbounds i64, i64* %ln1T3, i32 -3
  store i64 %ln1T7, i64* %ln1T8, !tbaa !3
  %ln1Ta = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln1T9 = load i64*, i64** %Hp_Var
  %ln1Tb = getelementptr inbounds i64, i64* %ln1T9, i32 -2
  store i64 %ln1Ta, i64* %ln1Tb, !tbaa !3
  %ln1Td = ptrtoint i8* @base_GHCziShow_zdfShowZLz2cUZR4_closure to i64
  %ln1Tc = load i64*, i64** %Hp_Var
  %ln1Te = getelementptr inbounds i64, i64* %ln1Tc, i32 -1
  store i64 %ln1Td, i64* %ln1Te, !tbaa !3
  %ln1Tg = load i64*, i64** %Hp_Var
  %ln1Th = getelementptr inbounds i64, i64* %ln1Tg, i32 -6
  %ln1Ti = ptrtoint i64* %ln1Th to i64
  %ln1Tf = load i64*, i64** %Hp_Var
  %ln1Tj = getelementptr inbounds i64, i64* %ln1Tf, i32 0
  store i64 %ln1Ti, i64* %ln1Tj, !tbaa !3
  %ln1Tl = load i64*, i64** %Hp_Var
  %ln1Tm = ptrtoint i64* %ln1Tl to i64
  %ln1Tn = add i64 %ln1Tm, -14
  store i64 %ln1Tn, i64* %R1_Var
  %ln1To = load i64*, i64** %Sp_Var
  %ln1Tp = getelementptr inbounds i64, i64* %ln1To, i32 3
  %ln1Tq = ptrtoint i64* %ln1Tp to i64
  %ln1Tr = inttoptr i64 %ln1Tq to i64*
  store i64* %ln1Tr, i64** %Sp_Var
  %ln1Ts = load i64*, i64** %Sp_Var
  %ln1Tt = getelementptr inbounds i64, i64* %ln1Ts, i32 0
  %ln1Tu = bitcast i64* %ln1Tt to i64*
  %ln1Tv = load i64, i64* %ln1Tu, !tbaa !2
  %ln1Tw = inttoptr i64 %ln1Tv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1Tx = load i64*, i64** %Sp_Var
  %ln1Ty = load i64*, i64** %Hp_Var
  %ln1Tz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Tw( i64* %Base_Arg, i64* %ln1Tx, i64* %ln1Ty, i64 %ln1Tz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1JZ:
  %ln1TA = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %ln1TA, !tbaa !5
  %ln1TC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1Im_info$def to i64
  %ln1TB = load i64*, i64** %Sp_Var
  %ln1TD = getelementptr inbounds i64, i64* %ln1TB, i32 0
  store i64 %ln1TC, i64* %ln1TD, !tbaa !2
  %ln1TE = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1TF = load i64*, i64** %Sp_Var
  %ln1TG = load i64*, i64** %Hp_Var
  %ln1TH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1TE( i64* %Base_Arg, i64* %ln1TF, i64* %ln1TG, i64 %ln1TH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.982716882 UTC

%Main_main_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStrzq_closure to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.983465469 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 3, i32 14, i32 0}>
{
n1TP:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c1TM
c1TM:
  %ln1TQ = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln1TR = add i64 %ln1TQ, 2
  store i64 %ln1TR, i64* %R4_Var
  %ln1TS = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %ln1TS, i64* %R3_Var
  %ln1TT = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %ln1TT, i64* %R2_Var
  %ln1TU = bitcast i8* @base_GHCziIOziHandleziText_hPutStrzq_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1TV = load i64, i64* %R2_Var
  %ln1TW = load i64, i64* %R3_Var
  %ln1TX = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1TU( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln1TV, i64 %ln1TW, i64 %ln1TX, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.98483801 UTC

%Main_main3_closure_struct = type <{i64, i64, i64, i64}>
@Main_main3_closure$def = internal global %Main_main3_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main3_info$def to i64), i64 ptrtoint (%Main_main_closure_struct* @Main_main_closure$def to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 0}>
@Main_main3_closure = alias i8, bitcast (%Main_main3_closure_struct* @Main_main3_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.985467729 UTC

@Main_main3_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main3_info$def to i8*)
define ghccc void @Main_main3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 2, i32 14, i32 0}>
{
n1U5:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  br label %c1U2
c1U2:
  %ln1U6 = ptrtoint %Main_main_closure_struct* @Main_main_closure$def to i64
  %ln1U7 = add i64 %ln1U6, 1
  store i64 %ln1U7, i64* %R2_Var
  %ln1U8 = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1U9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1U8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln1U9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.986553629 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2021-04-14 18:50:25.987154602 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 4294967299, i64 0, i32 14, i32 add (i32 trunc (i64 sub (i64 ptrtoint (%Main_main3_closure_struct* @Main_main3_closure$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)) to i32),i32 0)}>
{
n1Uh:
  br label %c1Ue
c1Ue:
  %ln1Ui = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1Ui( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-04-14 18:50:25.987872648 UTC

@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@base_GHCziShow_zdfShowZLz2cUZR2_closure = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@stg_SRT_2_info = external global i8
@integerzmwiredzmin_GHCziIntegerziType_wordToInteger_closure = external global i8
@base_GHCziShow_zdwzdcshowsPrec4_closure = external global i8
@integerzmwiredzmin_GHCziIntegerziType_wordToInteger_info = external global i8
@integerzmwiredzmin_GHCziIntegerziType_smallInteger_info = external global i8
@base_GHCziShow_zdwzdcshowsPrec4_info = external global i8
@stg_gc_pp = external global i8
@stg_upd_frame_info = external global i8
@base_GHCziShow_zdfShowZLz2cUZRzuzdsgo1_info = external global i8
@base_GHCziShow_showListzuzu1_closure = external global i8
@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@base_GHCziShow_zdfShowZLz2cUZR4_closure = external global i8
@stg_gc_noregs = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStrzq_closure = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@base_GHCziIOziHandleziText_hPutStrzq_info = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8


==================== LLVM Code ====================
2021-04-14 18:50:25.988287483 UTC

@llvm.used = appending constant [12 x i8*] [i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main3_closure_struct* @Main_main3_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%_u1K2_srt_struct* @_u1K2_srt$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_test_closure_struct* @Main_test_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)], section "llvm.metadata"

