Database.hs:(17,75)-(44,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \Thunk\n\
      \  tname ByteString\n\
      \\n\
      \Datum\n\
      \  dname ByteString\n\
      \\n\
      \ThunkRead\n\
      \  thunk_id ThunkId OnDeleteCascade\n\
      \  datum_id DatumId OnDeleteCascade\n\
      \  datum_value ByteString\n\
      \  UniqueRead thunk_id datum_id\n\
      \\n\
      \ThunkWrite\n\
      \  thunk_id ThunkId OnDeleteCascade\n\
      \  datum_id DatumId OnDeleteCascade\n\
      \  datum_value ByteString\n\
      \  UniqueWrite thunk_id datum_id\n\
      \\n\
      \ThunkSync\n\
      \  thunk_id ThunkId OnDeleteCascade\n\
      \  sync ByteString\n\
      \\n\
      \ThunkParent\n\
      \  parent ThunkId OnDeleteCascade\n\
      \  child ThunkId OnDeleteCascade\n\
      \  UniqueRel parent child\n"
  ======>
    [((((((((((EntityDef (HaskellName (Data.Text.pack "Thunk")))
                (DBName (Data.Text.pack "thunk")))
               ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                          (DBName (Data.Text.pack "id")))
                         ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                        SqlInt64)
                       [])
                      True)
                     ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                        ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                           (Data.Text.pack "Int64"))))
                    ((FieldCascade Nothing) Nothing))
                   Nothing)
                  Nothing))
              [])
             [(((((((((FieldDef (HaskellName (Data.Text.pack "tname")))
                        (DBName (Data.Text.pack "tname")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                      (SqlOther (Data.Text.pack "SqlType unset for tname")))
                     [])
                    True)
                   NoReference)
                  ((FieldCascade Nothing) Nothing))
                 Nothing)
                Nothing])
            [])
           [])
          [])
         (Data.Map.Internal.fromList []))
        False)
       Nothing
       {entityFields = [(((((((((FieldDef
                                   (HaskellName (Data.Text.pack "tname")))
                                  (DBName (Data.Text.pack "tname")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing],
        entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing},
     ((((((((((EntityDef (HaskellName (Data.Text.pack "Datum")))
                (DBName (Data.Text.pack "datum")))
               ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                          (DBName (Data.Text.pack "id")))
                         ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                        SqlInt64)
                       [])
                      True)
                     ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                        ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                           (Data.Text.pack "Int64"))))
                    ((FieldCascade Nothing) Nothing))
                   Nothing)
                  Nothing))
              [])
             [(((((((((FieldDef (HaskellName (Data.Text.pack "dname")))
                        (DBName (Data.Text.pack "dname")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                      (SqlOther (Data.Text.pack "SqlType unset for dname")))
                     [])
                    True)
                   NoReference)
                  ((FieldCascade Nothing) Nothing))
                 Nothing)
                Nothing])
            [])
           [])
          [])
         (Data.Map.Internal.fromList []))
        False)
       Nothing
       {entityFields = [(((((((((FieldDef
                                   (HaskellName (Data.Text.pack "dname")))
                                  (DBName (Data.Text.pack "dname")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing],
        entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing},
     ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkRead")))
                (DBName (Data.Text.pack "thunk_read")))
               ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                          (DBName (Data.Text.pack "id")))
                         ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                        SqlInt64)
                       [])
                      True)
                     ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                        ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                           (Data.Text.pack "Int64"))))
                    ((FieldCascade Nothing) Nothing))
                   Nothing)
                  Nothing))
              [])
             [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                        (DBName (Data.Text.pack "thunk_id")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                      (SqlOther (Data.Text.pack "SqlType unset for thunk_id")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing,
              (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                        (DBName (Data.Text.pack "datum_id")))
                       ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                      (SqlOther (Data.Text.pack "SqlType unset for datum_id")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing,
              (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                        (DBName (Data.Text.pack "datum_value")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                      (SqlOther (Data.Text.pack "SqlType unset for datum_value")))
                     [])
                    True)
                   NoReference)
                  ((FieldCascade Nothing) Nothing))
                 Nothing)
                Nothing])
            [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRead")))
                 (DBName (Data.Text.pack "unique_read")))
                [(HaskellName (Data.Text.pack "thunk_id"), 
                  DBName (Data.Text.pack "thunk_id")),
                 (HaskellName (Data.Text.pack "datum_id"), 
                  DBName (Data.Text.pack "datum_id"))])
               []])
           [])
          [])
         (Data.Map.Internal.fromList []))
        False)
       Nothing
       {entityFields = [(((((((((FieldDef
                                   (HaskellName (Data.Text.pack "thunk_id")))
                                  (DBName (Data.Text.pack "thunk_id")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing,
                        (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                  (DBName (Data.Text.pack "datum_id")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing,
                        (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                  (DBName (Data.Text.pack "datum_value")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing],
        entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing},
     ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkWrite")))
                (DBName (Data.Text.pack "thunk_write")))
               ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                          (DBName (Data.Text.pack "id")))
                         ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                        SqlInt64)
                       [])
                      True)
                     ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                        ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                           (Data.Text.pack "Int64"))))
                    ((FieldCascade Nothing) Nothing))
                   Nothing)
                  Nothing))
              [])
             [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                        (DBName (Data.Text.pack "thunk_id")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                      (SqlOther (Data.Text.pack "SqlType unset for thunk_id")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing,
              (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                        (DBName (Data.Text.pack "datum_id")))
                       ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                      (SqlOther (Data.Text.pack "SqlType unset for datum_id")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing,
              (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                        (DBName (Data.Text.pack "datum_value")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                      (SqlOther (Data.Text.pack "SqlType unset for datum_value")))
                     [])
                    True)
                   NoReference)
                  ((FieldCascade Nothing) Nothing))
                 Nothing)
                Nothing])
            [(((UniqueDef (HaskellName (Data.Text.pack "UniqueWrite")))
                 (DBName (Data.Text.pack "unique_write")))
                [(HaskellName (Data.Text.pack "thunk_id"), 
                  DBName (Data.Text.pack "thunk_id")),
                 (HaskellName (Data.Text.pack "datum_id"), 
                  DBName (Data.Text.pack "datum_id"))])
               []])
           [])
          [])
         (Data.Map.Internal.fromList []))
        False)
       Nothing
       {entityFields = [(((((((((FieldDef
                                   (HaskellName (Data.Text.pack "thunk_id")))
                                  (DBName (Data.Text.pack "thunk_id")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing,
                        (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                  (DBName (Data.Text.pack "datum_id")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing,
                        (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                  (DBName (Data.Text.pack "datum_value")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing],
        entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing},
     ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkSync")))
                (DBName (Data.Text.pack "thunk_sync")))
               ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                          (DBName (Data.Text.pack "id")))
                         ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                        SqlInt64)
                       [])
                      True)
                     ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                        ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                           (Data.Text.pack "Int64"))))
                    ((FieldCascade Nothing) Nothing))
                   Nothing)
                  Nothing))
              [])
             [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                        (DBName (Data.Text.pack "thunk_id")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                      (SqlOther (Data.Text.pack "SqlType unset for thunk_id")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing,
              (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                        (DBName (Data.Text.pack "sync")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                      (SqlOther (Data.Text.pack "SqlType unset for sync")))
                     [])
                    True)
                   NoReference)
                  ((FieldCascade Nothing) Nothing))
                 Nothing)
                Nothing])
            [])
           [])
          [])
         (Data.Map.Internal.fromList []))
        False)
       Nothing
       {entityFields = [(((((((((FieldDef
                                   (HaskellName (Data.Text.pack "thunk_id")))
                                  (DBName (Data.Text.pack "thunk_id")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing,
                        (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                                  (DBName (Data.Text.pack "sync")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing],
        entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing},
     ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkParent")))
                (DBName (Data.Text.pack "thunk_parent")))
               ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                          (DBName (Data.Text.pack "id")))
                         ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                        SqlInt64)
                       [])
                      True)
                     ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                        ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                           (Data.Text.pack "Int64"))))
                    ((FieldCascade Nothing) Nothing))
                   Nothing)
                  Nothing))
              [])
             [(((((((((FieldDef (HaskellName (Data.Text.pack "parent")))
                        (DBName (Data.Text.pack "parent")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                      (SqlOther (Data.Text.pack "SqlType unset for parent")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing,
              (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                        (DBName (Data.Text.pack "child")))
                       ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                      (SqlOther (Data.Text.pack "SqlType unset for child")))
                     [])
                    True)
                   ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                      ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                         (Data.Text.pack "Int64"))))
                  ((FieldCascade Nothing) (Just Cascade)))
                 Nothing)
                Nothing])
            [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRel")))
                 (DBName (Data.Text.pack "unique_rel")))
                [(HaskellName (Data.Text.pack "parent"), 
                  DBName (Data.Text.pack "parent")),
                 (HaskellName (Data.Text.pack "child"), 
                  DBName (Data.Text.pack "child"))])
               []])
           [])
          [])
         (Data.Map.Internal.fromList []))
        False)
       Nothing
       {entityFields = [(((((((((FieldDef
                                   (HaskellName (Data.Text.pack "parent")))
                                  (DBName (Data.Text.pack "parent")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing,
                        (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                                  (DBName (Data.Text.pack "child")))
                                 ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                               [])
                              True)
                             ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                   (Data.Text.pack "Int64"))))
                            ((FieldCascade Nothing) (Just Cascade)))
                           Nothing)
                          Nothing],
        entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing}]
Database.hs:(17,1)-(44,2): Splicing declarations
    share
      [mkPersist sqlSettings, mkMigrate "createTables"]
      ([((((((((((EntityDef (HaskellName (Data.Text.pack "Thunk")))
                   (DBName (Data.Text.pack "thunk")))
                  ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           SqlInt64)
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing))
                 [])
                [(((((((((FieldDef (HaskellName (Data.Text.pack "tname")))
                           (DBName (Data.Text.pack "tname")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                         (SqlOther (Data.Text.pack "SqlType unset for tname")))
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing])
               [])
              [])
             [])
            (Data.Map.Internal.fromList []))
           False)
          Nothing
          {entityFields = [(((((((((FieldDef
                                      (HaskellName (Data.Text.pack "tname")))
                                     (DBName (Data.Text.pack "tname")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing],
           entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                (DBName (Data.Text.pack "id")))
                               ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                              (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                             [])
                            True)
                           ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                              ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                 (Data.Text.pack "Int64"))))
                          ((FieldCascade Nothing) Nothing))
                         Nothing)
                        Nothing},
        ((((((((((EntityDef (HaskellName (Data.Text.pack "Datum")))
                   (DBName (Data.Text.pack "datum")))
                  ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                           SqlInt64)
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing))
                 [])
                [(((((((((FieldDef (HaskellName (Data.Text.pack "dname")))
                           (DBName (Data.Text.pack "dname")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                         (SqlOther (Data.Text.pack "SqlType unset for dname")))
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing])
               [])
              [])
             [])
            (Data.Map.Internal.fromList []))
           False)
          Nothing
          {entityFields = [(((((((((FieldDef
                                      (HaskellName (Data.Text.pack "dname")))
                                     (DBName (Data.Text.pack "dname")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing],
           entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                (DBName (Data.Text.pack "id")))
                               ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                              (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                             [])
                            True)
                           ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                              ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                 (Data.Text.pack "Int64"))))
                          ((FieldCascade Nothing) Nothing))
                         Nothing)
                        Nothing},
        ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkRead")))
                   (DBName (Data.Text.pack "thunk_read")))
                  ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                           SqlInt64)
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing))
                 [])
                [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                           (DBName (Data.Text.pack "thunk_id")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                         (SqlOther (Data.Text.pack "SqlType unset for thunk_id")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing,
                 (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                           (DBName (Data.Text.pack "datum_id")))
                          ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                         (SqlOther (Data.Text.pack "SqlType unset for datum_id")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing,
                 (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                           (DBName (Data.Text.pack "datum_value")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                         (SqlOther (Data.Text.pack "SqlType unset for datum_value")))
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing])
               [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRead")))
                    (DBName (Data.Text.pack "unique_read")))
                   [(HaskellName (Data.Text.pack "thunk_id"), 
                     DBName (Data.Text.pack "thunk_id")),
                    (HaskellName (Data.Text.pack "datum_id"), 
                     DBName (Data.Text.pack "datum_id"))])
                  []])
              [])
             [])
            (Data.Map.Internal.fromList []))
           False)
          Nothing
          {entityFields = [(((((((((FieldDef
                                      (HaskellName (Data.Text.pack "thunk_id")))
                                     (DBName (Data.Text.pack "thunk_id")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing,
                           (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                     (DBName (Data.Text.pack "datum_id")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing,
                           (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                     (DBName (Data.Text.pack "datum_value")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing],
           entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                (DBName (Data.Text.pack "id")))
                               ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                              (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                             [])
                            True)
                           ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                              ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                 (Data.Text.pack "Int64"))))
                          ((FieldCascade Nothing) Nothing))
                         Nothing)
                        Nothing},
        ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkWrite")))
                   (DBName (Data.Text.pack "thunk_write")))
                  ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                           SqlInt64)
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing))
                 [])
                [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                           (DBName (Data.Text.pack "thunk_id")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                         (SqlOther (Data.Text.pack "SqlType unset for thunk_id")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing,
                 (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                           (DBName (Data.Text.pack "datum_id")))
                          ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                         (SqlOther (Data.Text.pack "SqlType unset for datum_id")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing,
                 (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                           (DBName (Data.Text.pack "datum_value")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                         (SqlOther (Data.Text.pack "SqlType unset for datum_value")))
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing])
               [(((UniqueDef (HaskellName (Data.Text.pack "UniqueWrite")))
                    (DBName (Data.Text.pack "unique_write")))
                   [(HaskellName (Data.Text.pack "thunk_id"), 
                     DBName (Data.Text.pack "thunk_id")),
                    (HaskellName (Data.Text.pack "datum_id"), 
                     DBName (Data.Text.pack "datum_id"))])
                  []])
              [])
             [])
            (Data.Map.Internal.fromList []))
           False)
          Nothing
          {entityFields = [(((((((((FieldDef
                                      (HaskellName (Data.Text.pack "thunk_id")))
                                     (DBName (Data.Text.pack "thunk_id")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing,
                           (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                     (DBName (Data.Text.pack "datum_id")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing,
                           (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                     (DBName (Data.Text.pack "datum_value")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing],
           entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                (DBName (Data.Text.pack "id")))
                               ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                              (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                             [])
                            True)
                           ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                              ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                 (Data.Text.pack "Int64"))))
                          ((FieldCascade Nothing) Nothing))
                         Nothing)
                        Nothing},
        ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkSync")))
                   (DBName (Data.Text.pack "thunk_sync")))
                  ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                           SqlInt64)
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing))
                 [])
                [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                           (DBName (Data.Text.pack "thunk_id")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                         (SqlOther (Data.Text.pack "SqlType unset for thunk_id")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing,
                 (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                           (DBName (Data.Text.pack "sync")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                         (SqlOther (Data.Text.pack "SqlType unset for sync")))
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing])
               [])
              [])
             [])
            (Data.Map.Internal.fromList []))
           False)
          Nothing
          {entityFields = [(((((((((FieldDef
                                      (HaskellName (Data.Text.pack "thunk_id")))
                                     (DBName (Data.Text.pack "thunk_id")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing,
                           (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                                     (DBName (Data.Text.pack "sync")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy ByteString)))
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing],
           entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                (DBName (Data.Text.pack "id")))
                               ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                              (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                             [])
                            True)
                           ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                              ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                 (Data.Text.pack "Int64"))))
                          ((FieldCascade Nothing) Nothing))
                         Nothing)
                        Nothing},
        ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkParent")))
                   (DBName (Data.Text.pack "thunk_parent")))
                  ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                             (DBName (Data.Text.pack "id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                           SqlInt64)
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing))
                 [])
                [(((((((((FieldDef (HaskellName (Data.Text.pack "parent")))
                           (DBName (Data.Text.pack "parent")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                         (SqlOther (Data.Text.pack "SqlType unset for parent")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing,
                 (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                           (DBName (Data.Text.pack "child")))
                          ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                         (SqlOther (Data.Text.pack "SqlType unset for child")))
                        [])
                       True)
                      ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                         ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                            (Data.Text.pack "Int64"))))
                     ((FieldCascade Nothing) (Just Cascade)))
                    Nothing)
                   Nothing])
               [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRel")))
                    (DBName (Data.Text.pack "unique_rel")))
                   [(HaskellName (Data.Text.pack "parent"), 
                     DBName (Data.Text.pack "parent")),
                    (HaskellName (Data.Text.pack "child"), 
                     DBName (Data.Text.pack "child"))])
                  []])
              [])
             [])
            (Data.Map.Internal.fromList []))
           False)
          Nothing
          {entityFields = [(((((((((FieldDef
                                      (HaskellName (Data.Text.pack "parent")))
                                     (DBName (Data.Text.pack "parent")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing,
                           (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                                     (DBName (Data.Text.pack "child")))
                                    ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                   (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                  [])
                                 True)
                                ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                   ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                      (Data.Text.pack "Int64"))))
                               ((FieldCascade Nothing) (Just Cascade)))
                              Nothing)
                             Nothing],
           entityId = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                (DBName (Data.Text.pack "id")))
                               ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                              (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                             [])
                            True)
                           ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                              ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                 (Data.Text.pack "Int64"))))
                          ((FieldCascade Nothing) Nothing))
                         Nothing)
                        Nothing}])
  ======>
    instance PersistField Thunk where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["tname"]
    instance PersistFieldSql Thunk where
      sqlType _ = SqlString
    instance PersistField Datum where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["dname"]
    instance PersistFieldSql Datum where
      sqlType _ = SqlString
    instance PersistField ThunkRead where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["thunk_id", "datum_id", "datum_value"]
    instance PersistFieldSql ThunkRead where
      sqlType _ = SqlString
    instance PersistField ThunkWrite where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["thunk_id", "datum_id", "datum_value"]
    instance PersistFieldSql ThunkWrite where
      sqlType _ = SqlString
    instance PersistField ThunkSync where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["thunk_id", "sync"]
    instance PersistFieldSql ThunkSync where
      sqlType _ = SqlString
    instance PersistField ThunkParent where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["parent", "child"]
    instance PersistFieldSql ThunkParent where
      sqlType _ = SqlString
    data Thunk = Thunk {thunkTname :: !ByteString}
    type ThunkId = Key Thunk
    instance PersistEntity Thunk where
      type PersistEntityBackend Thunk = SqlBackend
      data Unique Thunk
      newtype Key Thunk
        = ThunkKey {unThunkKey :: (BackendKey SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.ToJSON.ToJSON
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.FromJSON.FromJSON
      data EntityField Thunk typ
        = (typ ~ Key Thunk) => ThunkId | (typ ~ ByteString) => ThunkTname
      keyToValues = ((: []) . (toPersistValue . unThunkKey))
      keyFromValues
        = (fmap ThunkKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((EntityDef (HaskellName (Data.Text.pack "Thunk")))
                     (DBName (Data.Text.pack "thunk")))
                    ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                               (DBName (Data.Text.pack "id")))
                              ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                             (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           True)
                          ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                             ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                (Data.Text.pack "Int64"))))
                         ((FieldCascade Nothing) Nothing))
                        Nothing)
                       Nothing))
                   [])
                  [(((((((((FieldDef (HaskellName (Data.Text.pack "tname")))
                             (DBName (Data.Text.pack "tname")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                           SqlBlob)
                          [])
                         True)
                        NoReference)
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing])
                 [])
                [])
               [])
              (Data.Map.Internal.fromList []))
             False)
            Nothing
      toPersistFields (Thunk x_a1MTO) = [SomePersistField x_a1MTO]
      fromPersistValues [x1_a1MTQ]
        = Thunk
            <$>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk")) (Data.Text.pack "tname"))
                 . fromPersistValue)
                x1_a1MTQ
      fromPersistValues x_a1MTP
        = (Left
             $ (mappend (Data.Text.pack "Thunk: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a1MTP))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Thunk _tname_a1MTR) = []
      persistFieldDef ThunkId
        = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                    (DBName (Data.Text.pack "id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistFieldDef ThunkTname
        = (((((((((FieldDef (HaskellName (Data.Text.pack "tname")))
                    (DBName (Data.Text.pack "tname")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                  SqlBlob)
                 [])
                True)
               NoReference)
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistIdField = ThunkId
      fieldLens ThunkId
        = (lensPTH entityKey)
            (\ (Entity _ value_a1MTS) key_a1MTT
               -> (Entity key_a1MTT) value_a1MTS)
      fieldLens ThunkTname
        = (lensPTH (thunkTname . entityVal))
            (\ (Entity key_a1MTU value_a1MTV) x_a1MTW
               -> (Entity key_a1MTU) value_a1MTV {thunkTname = x_a1MTW})
    instance ToBackendKey SqlBackend Thunk where
      toBackendKey = unThunkKey
      fromBackendKey = ThunkKey
    data Datum = Datum {datumDname :: !ByteString}
    type DatumId = Key Datum
    instance PersistEntity Datum where
      type PersistEntityBackend Datum = SqlBackend
      data Unique Datum
      newtype Key Datum
        = DatumKey {unDatumKey :: (BackendKey SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.ToJSON.ToJSON
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.FromJSON.FromJSON
      data EntityField Datum typ
        = (typ ~ Key Datum) => DatumId | (typ ~ ByteString) => DatumDname
      keyToValues = ((: []) . (toPersistValue . unDatumKey))
      keyFromValues
        = (fmap DatumKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((EntityDef (HaskellName (Data.Text.pack "Datum")))
                     (DBName (Data.Text.pack "datum")))
                    ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                               (DBName (Data.Text.pack "id")))
                              ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                             (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           True)
                          ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                             ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                (Data.Text.pack "Int64"))))
                         ((FieldCascade Nothing) Nothing))
                        Nothing)
                       Nothing))
                   [])
                  [(((((((((FieldDef (HaskellName (Data.Text.pack "dname")))
                             (DBName (Data.Text.pack "dname")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                           SqlBlob)
                          [])
                         True)
                        NoReference)
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing])
                 [])
                [])
               [])
              (Data.Map.Internal.fromList []))
             False)
            Nothing
      toPersistFields (Datum x_a1MTX) = [SomePersistField x_a1MTX]
      fromPersistValues [x1_a1MTZ]
        = Datum
            <$>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "datum")) (Data.Text.pack "dname"))
                 . fromPersistValue)
                x1_a1MTZ
      fromPersistValues x_a1MTY
        = (Left
             $ (mappend (Data.Text.pack "Datum: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a1MTY))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Datum _dname_a1MU0) = []
      persistFieldDef DatumId
        = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                    (DBName (Data.Text.pack "id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistFieldDef DatumDname
        = (((((((((FieldDef (HaskellName (Data.Text.pack "dname")))
                    (DBName (Data.Text.pack "dname")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                  SqlBlob)
                 [])
                True)
               NoReference)
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistIdField = DatumId
      fieldLens DatumId
        = (lensPTH entityKey)
            (\ (Entity _ value_a1MU1) key_a1MU2
               -> (Entity key_a1MU2) value_a1MU1)
      fieldLens DatumDname
        = (lensPTH (datumDname . entityVal))
            (\ (Entity key_a1MU3 value_a1MU4) x_a1MU5
               -> (Entity key_a1MU3) value_a1MU4 {datumDname = x_a1MU5})
    instance ToBackendKey SqlBackend Datum where
      toBackendKey = unDatumKey
      fromBackendKey = DatumKey
    data ThunkRead
      = ThunkRead {thunkReadThunk_id :: !(Key Thunk),
                   thunkReadDatum_id :: !(Key Datum),
                   thunkReadDatum_value :: !ByteString}
    type ThunkReadId = Key ThunkRead
    instance PersistEntity ThunkRead where
      type PersistEntityBackend ThunkRead = SqlBackend
      data Unique ThunkRead = UniqueRead (Key Thunk) (Key Datum)
      newtype Key ThunkRead
        = ThunkReadKey {unThunkReadKey :: (BackendKey SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.ToJSON.ToJSON
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.FromJSON.FromJSON
      data EntityField ThunkRead typ
        = (typ ~ Key ThunkRead) => ThunkReadId |
          (typ ~ Key Thunk) => ThunkReadThunk_id |
          (typ ~ Key Datum) => ThunkReadDatum_id |
          (typ ~ ByteString) => ThunkReadDatum_value
      keyToValues = ((: []) . (toPersistValue . unThunkReadKey))
      keyFromValues
        = (fmap ThunkReadKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkRead")))
                     (DBName (Data.Text.pack "thunk_read")))
                    ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                               (DBName (Data.Text.pack "id")))
                              ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                             (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           True)
                          ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                             ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                (Data.Text.pack "Int64"))))
                         ((FieldCascade Nothing) Nothing))
                        Nothing)
                       Nothing))
                   [])
                  [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                             (DBName (Data.Text.pack "thunk_id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing,
                   (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                             (DBName (Data.Text.pack "datum_id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing,
                   (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                             (DBName (Data.Text.pack "datum_value")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                           SqlBlob)
                          [])
                         True)
                        NoReference)
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing])
                 [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRead")))
                      (DBName (Data.Text.pack "unique_read")))
                     [(HaskellName (Data.Text.pack "thunk_id"), 
                       DBName (Data.Text.pack "thunk_id")),
                      (HaskellName (Data.Text.pack "datum_id"), 
                       DBName (Data.Text.pack "datum_id"))])
                    []])
                [])
               [])
              (Data.Map.Internal.fromList []))
             False)
            Nothing
      toPersistFields (ThunkRead x_a1MU6 x_a1MU7 x_a1MU8)
        = [SomePersistField x_a1MU6, SomePersistField x_a1MU7,
           SomePersistField x_a1MU8]
      fromPersistValues [x1_a1MUa, x2_a1MUb, x3_a1MUc]
        = ThunkRead
            <$>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_read"))
                    (Data.Text.pack "thunk_id"))
                 . fromPersistValue)
                x1_a1MUa
            <*>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_read"))
                    (Data.Text.pack "datum_id"))
                 . fromPersistValue)
                x2_a1MUb
            <*>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_read"))
                    (Data.Text.pack "datum_value"))
                 . fromPersistValue)
                x3_a1MUc
      fromPersistValues x_a1MU9
        = (Left
             $ (mappend
                  (Data.Text.pack "ThunkRead: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a1MU9))
      persistUniqueToFieldNames UniqueRead {}
        = [(HaskellName (Data.Text.pack "thunk_id"), 
            DBName (Data.Text.pack "thunk_id")),
           (HaskellName (Data.Text.pack "datum_id"), 
            DBName (Data.Text.pack "datum_id"))]
      persistUniqueToValues (UniqueRead x_a1MUd x_a1MUe)
        = [toPersistValue x_a1MUd, toPersistValue x_a1MUe]
      persistUniqueKeys
        (ThunkRead _thunk_id_a1MUf _datum_id_a1MUg _datum_value_a1MUh)
        = [(UniqueRead _thunk_id_a1MUf) _datum_id_a1MUg]
      persistFieldDef ThunkReadId
        = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                    (DBName (Data.Text.pack "id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistFieldDef ThunkReadThunk_id
        = (((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                    (DBName (Data.Text.pack "thunk_id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistFieldDef ThunkReadDatum_id
        = (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                    (DBName (Data.Text.pack "datum_id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistFieldDef ThunkReadDatum_value
        = (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                    (DBName (Data.Text.pack "datum_value")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                  SqlBlob)
                 [])
                True)
               NoReference)
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistIdField = ThunkReadId
      fieldLens ThunkReadId
        = (lensPTH entityKey)
            (\ (Entity _ value_a1MUi) key_a1MUj
               -> (Entity key_a1MUj) value_a1MUi)
      fieldLens ThunkReadThunk_id
        = (lensPTH (thunkReadThunk_id . entityVal))
            (\ (Entity key_a1MUk value_a1MUl) x_a1MUm
               -> (Entity key_a1MUk) value_a1MUl {thunkReadThunk_id = x_a1MUm})
      fieldLens ThunkReadDatum_id
        = (lensPTH (thunkReadDatum_id . entityVal))
            (\ (Entity key_a1MUk value_a1MUl) x_a1MUm
               -> (Entity key_a1MUk) value_a1MUl {thunkReadDatum_id = x_a1MUm})
      fieldLens ThunkReadDatum_value
        = (lensPTH (thunkReadDatum_value . entityVal))
            (\ (Entity key_a1MUk value_a1MUl) x_a1MUm
               -> (Entity key_a1MUk) value_a1MUl {thunkReadDatum_value = x_a1MUm})
    instance ToBackendKey SqlBackend ThunkRead where
      toBackendKey = unThunkReadKey
      fromBackendKey = ThunkReadKey
    data ThunkWrite
      = ThunkWrite {thunkWriteThunk_id :: !(Key Thunk),
                    thunkWriteDatum_id :: !(Key Datum),
                    thunkWriteDatum_value :: !ByteString}
    type ThunkWriteId = Key ThunkWrite
    instance PersistEntity ThunkWrite where
      type PersistEntityBackend ThunkWrite = SqlBackend
      data Unique ThunkWrite = UniqueWrite (Key Thunk) (Key Datum)
      newtype Key ThunkWrite
        = ThunkWriteKey {unThunkWriteKey :: (BackendKey SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.ToJSON.ToJSON
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.FromJSON.FromJSON
      data EntityField ThunkWrite typ
        = (typ ~ Key ThunkWrite) => ThunkWriteId |
          (typ ~ Key Thunk) => ThunkWriteThunk_id |
          (typ ~ Key Datum) => ThunkWriteDatum_id |
          (typ ~ ByteString) => ThunkWriteDatum_value
      keyToValues = ((: []) . (toPersistValue . unThunkWriteKey))
      keyFromValues
        = (fmap ThunkWriteKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkWrite")))
                     (DBName (Data.Text.pack "thunk_write")))
                    ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                               (DBName (Data.Text.pack "id")))
                              ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                             (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           True)
                          ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                             ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                (Data.Text.pack "Int64"))))
                         ((FieldCascade Nothing) Nothing))
                        Nothing)
                       Nothing))
                   [])
                  [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                             (DBName (Data.Text.pack "thunk_id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing,
                   (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                             (DBName (Data.Text.pack "datum_id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing,
                   (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                             (DBName (Data.Text.pack "datum_value")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                           SqlBlob)
                          [])
                         True)
                        NoReference)
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing])
                 [(((UniqueDef (HaskellName (Data.Text.pack "UniqueWrite")))
                      (DBName (Data.Text.pack "unique_write")))
                     [(HaskellName (Data.Text.pack "thunk_id"), 
                       DBName (Data.Text.pack "thunk_id")),
                      (HaskellName (Data.Text.pack "datum_id"), 
                       DBName (Data.Text.pack "datum_id"))])
                    []])
                [])
               [])
              (Data.Map.Internal.fromList []))
             False)
            Nothing
      toPersistFields (ThunkWrite x_a1MUn x_a1MUo x_a1MUp)
        = [SomePersistField x_a1MUn, SomePersistField x_a1MUo,
           SomePersistField x_a1MUp]
      fromPersistValues [x1_a1MUr, x2_a1MUs, x3_a1MUt]
        = ThunkWrite
            <$>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_write"))
                    (Data.Text.pack "thunk_id"))
                 . fromPersistValue)
                x1_a1MUr
            <*>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_write"))
                    (Data.Text.pack "datum_id"))
                 . fromPersistValue)
                x2_a1MUs
            <*>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_write"))
                    (Data.Text.pack "datum_value"))
                 . fromPersistValue)
                x3_a1MUt
      fromPersistValues x_a1MUq
        = (Left
             $ (mappend
                  (Data.Text.pack "ThunkWrite: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a1MUq))
      persistUniqueToFieldNames UniqueWrite {}
        = [(HaskellName (Data.Text.pack "thunk_id"), 
            DBName (Data.Text.pack "thunk_id")),
           (HaskellName (Data.Text.pack "datum_id"), 
            DBName (Data.Text.pack "datum_id"))]
      persistUniqueToValues (UniqueWrite x_a1MUu x_a1MUv)
        = [toPersistValue x_a1MUu, toPersistValue x_a1MUv]
      persistUniqueKeys
        (ThunkWrite _thunk_id_a1MUw _datum_id_a1MUx _datum_value_a1MUy)
        = [(UniqueWrite _thunk_id_a1MUw) _datum_id_a1MUx]
      persistFieldDef ThunkWriteId
        = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                    (DBName (Data.Text.pack "id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistFieldDef ThunkWriteThunk_id
        = (((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                    (DBName (Data.Text.pack "thunk_id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistFieldDef ThunkWriteDatum_id
        = (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                    (DBName (Data.Text.pack "datum_id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistFieldDef ThunkWriteDatum_value
        = (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                    (DBName (Data.Text.pack "datum_value")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                  SqlBlob)
                 [])
                True)
               NoReference)
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistIdField = ThunkWriteId
      fieldLens ThunkWriteId
        = (lensPTH entityKey)
            (\ (Entity _ value_a1MUz) key_a1MUA
               -> (Entity key_a1MUA) value_a1MUz)
      fieldLens ThunkWriteThunk_id
        = (lensPTH (thunkWriteThunk_id . entityVal))
            (\ (Entity key_a1MUB value_a1MUC) x_a1MUD
               -> (Entity key_a1MUB) value_a1MUC {thunkWriteThunk_id = x_a1MUD})
      fieldLens ThunkWriteDatum_id
        = (lensPTH (thunkWriteDatum_id . entityVal))
            (\ (Entity key_a1MUB value_a1MUC) x_a1MUD
               -> (Entity key_a1MUB) value_a1MUC {thunkWriteDatum_id = x_a1MUD})
      fieldLens ThunkWriteDatum_value
        = (lensPTH (thunkWriteDatum_value . entityVal))
            (\ (Entity key_a1MUB value_a1MUC) x_a1MUD
               -> (Entity key_a1MUB)
                    value_a1MUC {thunkWriteDatum_value = x_a1MUD})
    instance ToBackendKey SqlBackend ThunkWrite where
      toBackendKey = unThunkWriteKey
      fromBackendKey = ThunkWriteKey
    data ThunkSync
      = ThunkSync {thunkSyncThunk_id :: !(Key Thunk),
                   thunkSyncSync :: !ByteString}
    type ThunkSyncId = Key ThunkSync
    instance PersistEntity ThunkSync where
      type PersistEntityBackend ThunkSync = SqlBackend
      data Unique ThunkSync
      newtype Key ThunkSync
        = ThunkSyncKey {unThunkSyncKey :: (BackendKey SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.ToJSON.ToJSON
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.FromJSON.FromJSON
      data EntityField ThunkSync typ
        = (typ ~ Key ThunkSync) => ThunkSyncId |
          (typ ~ Key Thunk) => ThunkSyncThunk_id |
          (typ ~ ByteString) => ThunkSyncSync
      keyToValues = ((: []) . (toPersistValue . unThunkSyncKey))
      keyFromValues
        = (fmap ThunkSyncKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkSync")))
                     (DBName (Data.Text.pack "thunk_sync")))
                    ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                               (DBName (Data.Text.pack "id")))
                              ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                             (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           True)
                          ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                             ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                (Data.Text.pack "Int64"))))
                         ((FieldCascade Nothing) Nothing))
                        Nothing)
                       Nothing))
                   [])
                  [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                             (DBName (Data.Text.pack "thunk_id")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing,
                   (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                             (DBName (Data.Text.pack "sync")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                           SqlBlob)
                          [])
                         True)
                        NoReference)
                       ((FieldCascade Nothing) Nothing))
                      Nothing)
                     Nothing])
                 [])
                [])
               [])
              (Data.Map.Internal.fromList []))
             False)
            Nothing
      toPersistFields (ThunkSync x_a1MUE x_a1MUF)
        = [SomePersistField x_a1MUE, SomePersistField x_a1MUF]
      fromPersistValues [x1_a1MUH, x2_a1MUI]
        = ThunkSync
            <$>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_sync"))
                    (Data.Text.pack "thunk_id"))
                 . fromPersistValue)
                x1_a1MUH
            <*>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_sync"))
                    (Data.Text.pack "sync"))
                 . fromPersistValue)
                x2_a1MUI
      fromPersistValues x_a1MUG
        = (Left
             $ (mappend
                  (Data.Text.pack "ThunkSync: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a1MUG))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (ThunkSync _thunk_id_a1MUJ _sync_a1MUK) = []
      persistFieldDef ThunkSyncId
        = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                    (DBName (Data.Text.pack "id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistFieldDef ThunkSyncThunk_id
        = (((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                    (DBName (Data.Text.pack "thunk_id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistFieldDef ThunkSyncSync
        = (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                    (DBName (Data.Text.pack "sync")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                  SqlBlob)
                 [])
                True)
               NoReference)
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistIdField = ThunkSyncId
      fieldLens ThunkSyncId
        = (lensPTH entityKey)
            (\ (Entity _ value_a1MUL) key_a1MUM
               -> (Entity key_a1MUM) value_a1MUL)
      fieldLens ThunkSyncThunk_id
        = (lensPTH (thunkSyncThunk_id . entityVal))
            (\ (Entity key_a1MUN value_a1MUO) x_a1MUP
               -> (Entity key_a1MUN) value_a1MUO {thunkSyncThunk_id = x_a1MUP})
      fieldLens ThunkSyncSync
        = (lensPTH (thunkSyncSync . entityVal))
            (\ (Entity key_a1MUN value_a1MUO) x_a1MUP
               -> (Entity key_a1MUN) value_a1MUO {thunkSyncSync = x_a1MUP})
    instance ToBackendKey SqlBackend ThunkSync where
      toBackendKey = unThunkSyncKey
      fromBackendKey = ThunkSyncKey
    data ThunkParent
      = ThunkParent {thunkParentParent :: !(Key Thunk),
                     thunkParentChild :: !(Key Thunk)}
    type ThunkParentId = Key ThunkParent
    instance PersistEntity ThunkParent where
      type PersistEntityBackend ThunkParent = SqlBackend
      data Unique ThunkParent = UniqueRel (Key Thunk) (Key Thunk)
      newtype Key ThunkParent
        = ThunkParentKey {unThunkParentKey :: (BackendKey SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.ToJSON.ToJSON
        deriving newtype aeson-1.5.6.0:Data.Aeson.Types.FromJSON.FromJSON
      data EntityField ThunkParent typ
        = (typ ~ Key ThunkParent) => ThunkParentId |
          (typ ~ Key Thunk) => ThunkParentParent |
          (typ ~ Key Thunk) => ThunkParentChild
      keyToValues = ((: []) . (toPersistValue . unThunkParentKey))
      keyFromValues
        = (fmap ThunkParentKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkParent")))
                     (DBName (Data.Text.pack "thunk_parent")))
                    ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                               (DBName (Data.Text.pack "id")))
                              ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                             (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                            [])
                           True)
                          ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                             ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                (Data.Text.pack "Int64"))))
                         ((FieldCascade Nothing) Nothing))
                        Nothing)
                       Nothing))
                   [])
                  [(((((((((FieldDef (HaskellName (Data.Text.pack "parent")))
                             (DBName (Data.Text.pack "parent")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing,
                   (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                             (DBName (Data.Text.pack "child")))
                            ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                           (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                          [])
                         True)
                        ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                           ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                              (Data.Text.pack "Int64"))))
                       ((FieldCascade Nothing) (Just Cascade)))
                      Nothing)
                     Nothing])
                 [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRel")))
                      (DBName (Data.Text.pack "unique_rel")))
                     [(HaskellName (Data.Text.pack "parent"), 
                       DBName (Data.Text.pack "parent")),
                      (HaskellName (Data.Text.pack "child"), 
                       DBName (Data.Text.pack "child"))])
                    []])
                [])
               [])
              (Data.Map.Internal.fromList []))
             False)
            Nothing
      toPersistFields (ThunkParent x_a1MUQ x_a1MUR)
        = [SomePersistField x_a1MUQ, SomePersistField x_a1MUR]
      fromPersistValues [x1_a1MUT, x2_a1MUU]
        = ThunkParent
            <$>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_parent"))
                    (Data.Text.pack "parent"))
                 . fromPersistValue)
                x1_a1MUT
            <*>
              (Database.Persist.TH.mapLeft
                 ((fieldError (Data.Text.pack "thunk_parent"))
                    (Data.Text.pack "child"))
                 . fromPersistValue)
                x2_a1MUU
      fromPersistValues x_a1MUS
        = (Left
             $ (mappend
                  (Data.Text.pack "ThunkParent: fromPersistValues failed on: "))
                 (Data.Text.pack $ show x_a1MUS))
      persistUniqueToFieldNames UniqueRel {}
        = [(HaskellName (Data.Text.pack "parent"), 
            DBName (Data.Text.pack "parent")),
           (HaskellName (Data.Text.pack "child"), 
            DBName (Data.Text.pack "child"))]
      persistUniqueToValues (UniqueRel x_a1MUV x_a1MUW)
        = [toPersistValue x_a1MUV, toPersistValue x_a1MUW]
      persistUniqueKeys (ThunkParent _parent_a1MUX _child_a1MUY)
        = [(UniqueRel _parent_a1MUX) _child_a1MUY]
      persistFieldDef ThunkParentId
        = (((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                    (DBName (Data.Text.pack "id")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) Nothing))
             Nothing)
            Nothing
      persistFieldDef ThunkParentParent
        = (((((((((FieldDef (HaskellName (Data.Text.pack "parent")))
                    (DBName (Data.Text.pack "parent")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistFieldDef ThunkParentChild
        = (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                    (DBName (Data.Text.pack "child")))
                   ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                  SqlInt64)
                 [])
                True)
               ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                  ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                     (Data.Text.pack "Int64"))))
              ((FieldCascade Nothing) (Just Cascade)))
             Nothing)
            Nothing
      persistIdField = ThunkParentId
      fieldLens ThunkParentId
        = (lensPTH entityKey)
            (\ (Entity _ value_a1MUZ) key_a1MV0
               -> (Entity key_a1MV0) value_a1MUZ)
      fieldLens ThunkParentParent
        = (lensPTH (thunkParentParent . entityVal))
            (\ (Entity key_a1MV1 value_a1MV2) x_a1MV3
               -> (Entity key_a1MV1) value_a1MV2 {thunkParentParent = x_a1MV3})
      fieldLens ThunkParentChild
        = (lensPTH (thunkParentChild . entityVal))
            (\ (Entity key_a1MV1 value_a1MV2) x_a1MV3
               -> (Entity key_a1MV1) value_a1MV2 {thunkParentChild = x_a1MV3})
    instance ToBackendKey SqlBackend ThunkParent where
      toBackendKey = unThunkParentKey
      fromBackendKey = ThunkParentKey
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Thunk) =>
             OnlyOneUniqueKey Thunk where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Thunk) =>
             AtLeastOneUniqueKey Thunk where
      requireUniquesP _ = error "impossible"
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Datum) =>
             OnlyOneUniqueKey Datum where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Datum) =>
             AtLeastOneUniqueKey Datum where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey ThunkRead where
      onlyUniqueP = (Prelude.head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ThunkRead where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ThunkWrite where
      onlyUniqueP = (Prelude.head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ThunkWrite where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance GHC.TypeLits.TypeError (NoUniqueKeysError ThunkSync) =>
             OnlyOneUniqueKey ThunkSync where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError ThunkSync) =>
             AtLeastOneUniqueKey ThunkSync where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey ThunkParent where
      onlyUniqueP = (Prelude.head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ThunkParent where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "tname" Thunk ByteString where
      symbolToField = ThunkTname
    instance SymbolToField "dname" Datum ByteString where
      symbolToField = DatumDname
    instance SymbolToField "thunk_id" ThunkRead (Key Thunk) where
      symbolToField = ThunkReadThunk_id
    instance SymbolToField "datum_id" ThunkRead (Key Datum) where
      symbolToField = ThunkReadDatum_id
    instance SymbolToField "datum_value" ThunkRead ByteString where
      symbolToField = ThunkReadDatum_value
    instance SymbolToField "thunk_id" ThunkWrite (Key Thunk) where
      symbolToField = ThunkWriteThunk_id
    instance SymbolToField "datum_id" ThunkWrite (Key Datum) where
      symbolToField = ThunkWriteDatum_id
    instance SymbolToField "datum_value" ThunkWrite ByteString where
      symbolToField = ThunkWriteDatum_value
    instance SymbolToField "thunk_id" ThunkSync (Key Thunk) where
      symbolToField = ThunkSyncThunk_id
    instance SymbolToField "sync" ThunkSync ByteString where
      symbolToField = ThunkSyncSync
    instance SymbolToField "parent" ThunkParent (Key Thunk) where
      symbolToField = ThunkParentParent
    instance SymbolToField "child" ThunkParent (Key Thunk) where
      symbolToField = ThunkParentChild
    createTables :: Migration
    createTables
      = do let defs_a1MV4
                 = [((((((((((EntityDef (HaskellName (Data.Text.pack "Thunk")))
                               (DBName (Data.Text.pack "thunk")))
                              ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                         (DBName (Data.Text.pack "id")))
                                        ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                       (sqlType
                                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                      [])
                                     True)
                                    ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                       ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                          (Data.Text.pack "Int64"))))
                                   ((FieldCascade Nothing) Nothing))
                                  Nothing)
                                 Nothing))
                             [])
                            [(((((((((FieldDef (HaskellName (Data.Text.pack "tname")))
                                       (DBName (Data.Text.pack "tname")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                     SqlBlob)
                                    [])
                                   True)
                                  NoReference)
                                 ((FieldCascade Nothing) Nothing))
                                Nothing)
                               Nothing])
                           [])
                          [])
                         [])
                        (Data.Map.Internal.fromList []))
                       False)
                      Nothing,
                    ((((((((((EntityDef (HaskellName (Data.Text.pack "Datum")))
                               (DBName (Data.Text.pack "datum")))
                              ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                         (DBName (Data.Text.pack "id")))
                                        ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                       (sqlType
                                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                      [])
                                     True)
                                    ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                       ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                          (Data.Text.pack "Int64"))))
                                   ((FieldCascade Nothing) Nothing))
                                  Nothing)
                                 Nothing))
                             [])
                            [(((((((((FieldDef (HaskellName (Data.Text.pack "dname")))
                                       (DBName (Data.Text.pack "dname")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                     SqlBlob)
                                    [])
                                   True)
                                  NoReference)
                                 ((FieldCascade Nothing) Nothing))
                                Nothing)
                               Nothing])
                           [])
                          [])
                         [])
                        (Data.Map.Internal.fromList []))
                       False)
                      Nothing,
                    ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkRead")))
                               (DBName (Data.Text.pack "thunk_read")))
                              ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                         (DBName (Data.Text.pack "id")))
                                        ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                                       (sqlType
                                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                      [])
                                     True)
                                    ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                                       ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                          (Data.Text.pack "Int64"))))
                                   ((FieldCascade Nothing) Nothing))
                                  Nothing)
                                 Nothing))
                             [])
                            [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                                       (DBName (Data.Text.pack "thunk_id")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing,
                             (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                       (DBName (Data.Text.pack "datum_id")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing,
                             (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                       (DBName (Data.Text.pack "datum_value")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                     SqlBlob)
                                    [])
                                   True)
                                  NoReference)
                                 ((FieldCascade Nothing) Nothing))
                                Nothing)
                               Nothing])
                           [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRead")))
                                (DBName (Data.Text.pack "unique_read")))
                               [(HaskellName (Data.Text.pack "thunk_id"), 
                                 DBName (Data.Text.pack "thunk_id")),
                                (HaskellName (Data.Text.pack "datum_id"), 
                                 DBName (Data.Text.pack "datum_id"))])
                              []])
                          [])
                         [])
                        (Data.Map.Internal.fromList []))
                       False)
                      Nothing,
                    ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkWrite")))
                               (DBName (Data.Text.pack "thunk_write")))
                              ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                         (DBName (Data.Text.pack "id")))
                                        ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                                       (sqlType
                                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                      [])
                                     True)
                                    ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                                       ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                          (Data.Text.pack "Int64"))))
                                   ((FieldCascade Nothing) Nothing))
                                  Nothing)
                                 Nothing))
                             [])
                            [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                                       (DBName (Data.Text.pack "thunk_id")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing,
                             (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                       (DBName (Data.Text.pack "datum_id")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing,
                             (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                       (DBName (Data.Text.pack "datum_value")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                     SqlBlob)
                                    [])
                                   True)
                                  NoReference)
                                 ((FieldCascade Nothing) Nothing))
                                Nothing)
                               Nothing])
                           [(((UniqueDef (HaskellName (Data.Text.pack "UniqueWrite")))
                                (DBName (Data.Text.pack "unique_write")))
                               [(HaskellName (Data.Text.pack "thunk_id"), 
                                 DBName (Data.Text.pack "thunk_id")),
                                (HaskellName (Data.Text.pack "datum_id"), 
                                 DBName (Data.Text.pack "datum_id"))])
                              []])
                          [])
                         [])
                        (Data.Map.Internal.fromList []))
                       False)
                      Nothing,
                    ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkSync")))
                               (DBName (Data.Text.pack "thunk_sync")))
                              ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                         (DBName (Data.Text.pack "id")))
                                        ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                                       (sqlType
                                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                      [])
                                     True)
                                    ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                                       ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                          (Data.Text.pack "Int64"))))
                                   ((FieldCascade Nothing) Nothing))
                                  Nothing)
                                 Nothing))
                             [])
                            [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                                       (DBName (Data.Text.pack "thunk_id")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing,
                             (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                                       (DBName (Data.Text.pack "sync")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                                     SqlBlob)
                                    [])
                                   True)
                                  NoReference)
                                 ((FieldCascade Nothing) Nothing))
                                Nothing)
                               Nothing])
                           [])
                          [])
                         [])
                        (Data.Map.Internal.fromList []))
                       False)
                      Nothing,
                    ((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkParent")))
                               (DBName (Data.Text.pack "thunk_parent")))
                              ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                         (DBName (Data.Text.pack "id")))
                                        ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                                       (sqlType
                                          (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                      [])
                                     True)
                                    ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                                       ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                          (Data.Text.pack "Int64"))))
                                   ((FieldCascade Nothing) Nothing))
                                  Nothing)
                                 Nothing))
                             [])
                            [(((((((((FieldDef (HaskellName (Data.Text.pack "parent")))
                                       (DBName (Data.Text.pack "parent")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing,
                             (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                                       (DBName (Data.Text.pack "child")))
                                      ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                     (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                    [])
                                   True)
                                  ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                     ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                        (Data.Text.pack "Int64"))))
                                 ((FieldCascade Nothing) (Just Cascade)))
                                Nothing)
                               Nothing])
                           [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRel")))
                                (DBName (Data.Text.pack "unique_rel")))
                               [(HaskellName (Data.Text.pack "parent"), 
                                 DBName (Data.Text.pack "parent")),
                                (HaskellName (Data.Text.pack "child"), 
                                 DBName (Data.Text.pack "child"))])
                              []])
                          [])
                         [])
                        (Data.Map.Internal.fromList []))
                       False)
                      Nothing]
           (migrate defs_a1MV4)
             (((((((((((EntityDef (HaskellName (Data.Text.pack "Thunk")))
                         (DBName (Data.Text.pack "thunk")))
                        ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                   (DBName (Data.Text.pack "id")))
                                  ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                                 (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                [])
                               True)
                              ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                                 ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                    (Data.Text.pack "Int64"))))
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing))
                       [])
                      [(((((((((FieldDef (HaskellName (Data.Text.pack "tname")))
                                 (DBName (Data.Text.pack "tname")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                               SqlBlob)
                              [])
                             True)
                            NoReference)
                           ((FieldCascade Nothing) Nothing))
                          Nothing)
                         Nothing])
                     [])
                    [])
                   [])
                  (Data.Map.Internal.fromList []))
                 False)
                Nothing)
           (migrate defs_a1MV4)
             (((((((((((EntityDef (HaskellName (Data.Text.pack "Datum")))
                         (DBName (Data.Text.pack "datum")))
                        ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                   (DBName (Data.Text.pack "id")))
                                  ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                                 (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                [])
                               True)
                              ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                                 ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                    (Data.Text.pack "Int64"))))
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing))
                       [])
                      [(((((((((FieldDef (HaskellName (Data.Text.pack "dname")))
                                 (DBName (Data.Text.pack "dname")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                               SqlBlob)
                              [])
                             True)
                            NoReference)
                           ((FieldCascade Nothing) Nothing))
                          Nothing)
                         Nothing])
                     [])
                    [])
                   [])
                  (Data.Map.Internal.fromList []))
                 False)
                Nothing)
           (migrate defs_a1MV4)
             (((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkRead")))
                         (DBName (Data.Text.pack "thunk_read")))
                        ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                   (DBName (Data.Text.pack "id")))
                                  ((FTTypeCon Nothing) (Data.Text.pack "ThunkReadId")))
                                 (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                [])
                               True)
                              ((ForeignRef (HaskellName (Data.Text.pack "ThunkRead")))
                                 ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                    (Data.Text.pack "Int64"))))
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing))
                       [])
                      [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                                 (DBName (Data.Text.pack "thunk_id")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing,
                       (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                 (DBName (Data.Text.pack "datum_id")))
                                ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing,
                       (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                 (DBName (Data.Text.pack "datum_value")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                               SqlBlob)
                              [])
                             True)
                            NoReference)
                           ((FieldCascade Nothing) Nothing))
                          Nothing)
                         Nothing])
                     [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRead")))
                          (DBName (Data.Text.pack "unique_read")))
                         [(HaskellName (Data.Text.pack "thunk_id"), 
                           DBName (Data.Text.pack "thunk_id")),
                          (HaskellName (Data.Text.pack "datum_id"), 
                           DBName (Data.Text.pack "datum_id"))])
                        []])
                    [])
                   [])
                  (Data.Map.Internal.fromList []))
                 False)
                Nothing)
           (migrate defs_a1MV4)
             (((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkWrite")))
                         (DBName (Data.Text.pack "thunk_write")))
                        ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                   (DBName (Data.Text.pack "id")))
                                  ((FTTypeCon Nothing) (Data.Text.pack "ThunkWriteId")))
                                 (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                [])
                               True)
                              ((ForeignRef (HaskellName (Data.Text.pack "ThunkWrite")))
                                 ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                    (Data.Text.pack "Int64"))))
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing))
                       [])
                      [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                                 (DBName (Data.Text.pack "thunk_id")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing,
                       (((((((((FieldDef (HaskellName (Data.Text.pack "datum_id")))
                                 (DBName (Data.Text.pack "datum_id")))
                                ((FTTypeCon Nothing) (Data.Text.pack "DatumId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Datum")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing,
                       (((((((((FieldDef (HaskellName (Data.Text.pack "datum_value")))
                                 (DBName (Data.Text.pack "datum_value")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                               SqlBlob)
                              [])
                             True)
                            NoReference)
                           ((FieldCascade Nothing) Nothing))
                          Nothing)
                         Nothing])
                     [(((UniqueDef (HaskellName (Data.Text.pack "UniqueWrite")))
                          (DBName (Data.Text.pack "unique_write")))
                         [(HaskellName (Data.Text.pack "thunk_id"), 
                           DBName (Data.Text.pack "thunk_id")),
                          (HaskellName (Data.Text.pack "datum_id"), 
                           DBName (Data.Text.pack "datum_id"))])
                        []])
                    [])
                   [])
                  (Data.Map.Internal.fromList []))
                 False)
                Nothing)
           (migrate defs_a1MV4)
             (((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkSync")))
                         (DBName (Data.Text.pack "thunk_sync")))
                        ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                   (DBName (Data.Text.pack "id")))
                                  ((FTTypeCon Nothing) (Data.Text.pack "ThunkSyncId")))
                                 (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                [])
                               True)
                              ((ForeignRef (HaskellName (Data.Text.pack "ThunkSync")))
                                 ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                    (Data.Text.pack "Int64"))))
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing))
                       [])
                      [(((((((((FieldDef (HaskellName (Data.Text.pack "thunk_id")))
                                 (DBName (Data.Text.pack "thunk_id")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing,
                       (((((((((FieldDef (HaskellName (Data.Text.pack "sync")))
                                 (DBName (Data.Text.pack "sync")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ByteString")))
                               SqlBlob)
                              [])
                             True)
                            NoReference)
                           ((FieldCascade Nothing) Nothing))
                          Nothing)
                         Nothing])
                     [])
                    [])
                   [])
                  (Data.Map.Internal.fromList []))
                 False)
                Nothing)
           (migrate defs_a1MV4)
             (((((((((((EntityDef (HaskellName (Data.Text.pack "ThunkParent")))
                         (DBName (Data.Text.pack "thunk_parent")))
                        ((((((((((FieldDef (HaskellName (Data.Text.pack "Id")))
                                   (DBName (Data.Text.pack "id")))
                                  ((FTTypeCon Nothing) (Data.Text.pack "ThunkParentId")))
                                 (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                                [])
                               True)
                              ((ForeignRef (HaskellName (Data.Text.pack "ThunkParent")))
                                 ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                    (Data.Text.pack "Int64"))))
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing))
                       [])
                      [(((((((((FieldDef (HaskellName (Data.Text.pack "parent")))
                                 (DBName (Data.Text.pack "parent")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing,
                       (((((((((FieldDef (HaskellName (Data.Text.pack "child")))
                                 (DBName (Data.Text.pack "child")))
                                ((FTTypeCon Nothing) (Data.Text.pack "ThunkId")))
                               (sqlType (Data.Proxy.Proxy :: Data.Proxy.Proxy GHC.Int.Int64)))
                              [])
                             True)
                            ((ForeignRef (HaskellName (Data.Text.pack "Thunk")))
                               ((FTTypeCon (Just (Data.Text.pack "Data.Int")))
                                  (Data.Text.pack "Int64"))))
                           ((FieldCascade Nothing) (Just Cascade)))
                          Nothing)
                         Nothing])
                     [(((UniqueDef (HaskellName (Data.Text.pack "UniqueRel")))
                          (DBName (Data.Text.pack "unique_rel")))
                         [(HaskellName (Data.Text.pack "parent"), 
                           DBName (Data.Text.pack "parent")),
                          (HaskellName (Data.Text.pack "child"), 
                           DBName (Data.Text.pack "child"))])
                        []])
                    [])
                   [])
                  (Data.Map.Internal.fromList []))
                 False)
                Nothing)
