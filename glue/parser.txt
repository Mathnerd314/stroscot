syntax {
    string = (terminal | nonterminal)*
    α = β = string
    γ = string
    X = Y = nonterminal
    a = terminal
    A → α•β = {rule: A → αβ, pos: len(α)}
}
S[0..words] = EMPTY-ORDERED-SET
S[0].add((γ → •S, 0))
    for k ← from 0 to LENGTH(words) do
        for each state in S[k] do  // S[k] can expand during this loop
            if not FINISHED(state) then
                if NEXT-ELEMENT-OF(state) is a nonterminal then
                    PREDICTOR(state, k, grammar)         // non-terminal
                else do
                    SCANNER(state, k, words)             // terminal
            else do
                COMPLETER(state, k)
        end
    end
    return chart

procedure PREDICTOR((A → α•Bβ, j), k, grammar)
    for each (B → γ) in GRAMMAR-RULES-FOR(B, grammar) do
        ADD-TO-SET((B → •γ, k), S[k])
    end

procedure SCANNER((A → α•aβ, j), k, words)
    if a ⊂ PARTS-OF-SPEECH(words[k]) then
        ADD-TO-SET((A → αa•β, j), S[k+1])
    end

procedure COMPLETER((B → γ•, x), k)
    for each (A → α•Bβ, j) in S[x] do
        ADD-TO-SET((A → αB•β, j), S[k])
    end


Grune and Jacobs [112, Sct. 11.1] and Rekers [232].
Dc(∅) = ∅
Dc(ε) = ∅
Dc(c) = ε
Dc(c') = ∅ if c is not c'
Dc(A ○ B) = Dc(A) ○ B if A does not contain the empty string
Dc(A ○ B) = Dc(A) ○ B ∪ Dc(B) if A contains the empty string
Dc(A ∪ B) = Dc(A) ∪ Dc(B).
∂a(¬r) = ¬(∂ar)
∂a(r & s) = ∂ar & ∂as
∂a(r + s) = ∂ar + ∂as

deriv EmptySet = EmptySet
deriv EmptyString = EmptySet
deriv AnyByte = EmptyString
deriv Byte = if wanted == expected then EmptyString else EmptySet
deriv ByteRange = if wanted in range then EmptyString else EmptySet
deriv KleeneClosure = // ∂a(r∗) = ∂ar · r∗
  Concatenation(deriv subexpression, KleeneClosure)
deriv Concatenation = // ∂a(r · s) = ∂ar · s + ν(r) · ∂as
      if (IsNullable(exp->head())) {
        return Disjunction(Concatenation(Derivative(exp->head(), byte),
                                         exp->tail()),
                           Derivative(exp->tail(), byte));
      } else {
        return Concatenation(Derivative(exp->head(), byte),
                             exp->tail());
      }

    case kComplement:
      // 
      return Complement(Derivative(exp->sub(), byte));

    case kConjunction: {
      // 
      std::list<Exp> subs;
      for (Exp sub : exp->subexpressions()) {
        sub = Derivative(sub, byte);
        subs.push_back(sub);
      }
      return Conjunction(subs, false);
    }

    case kDisjunction: {
      // 
      std::list<Exp> subs;
      for (Exp sub : exp->subexpressions()) {
        sub = Derivative(sub, byte);
        subs.push_back(sub);
      }
      return Disjunction(subs, false);
    }

    case kCharacterClass:
    case kQuantifier:
      break;
  }
  abort();
}

    @<Initialize |current_earleme|@>@;
    @<Return 0 if no alternatives@>@;
    @<Initialize |current_earley_set|@>@;
    @<Scan from the alternative stack@>@;
    @<Pre-populate the completion stack@>@;
    while ((cause_p = MARPA_DSTACK_POP(r->t_completion_stack, YIM))) {
      YIM cause = *cause_p;
        @<Add new Earley items for |cause|@>@;
    }
    @<Add predictions to |current_earley_set|@>@;
    postdot_items_create(r, bv_ok_for_chain, current_earley_set);

    @t}\comment{@>
      /* If no terminals are expected, and there are no Earley items in
           uncompleted Earley sets, we can make no further progress.
           The parse is ``exhausted". */
    count_of_expected_terminals = bv_count (r->t_bv_nsyid_is_expected);
    if (count_of_expected_terminals <= 0
       && MARPA_DSTACK_LENGTH (r->t_alternatives ) <= 0)
      {
        @<Set |r| exhausted@>@;
      }
    earley_set_update_items(r, current_earley_set);
    if (r->t_active_event_count > 0) {sessions and options.

        trigger_events(r);
    }
    return_value = G_EVENT_COUNT(g);
    CLEANUP: ;
    @<Destroy |marpa_r_earleme_complete| locals@>@;
  }
  return return_value;
}

other implementations:
https://github.com/davidcoates/earley-mixfix-extra
https://github.com/ollef/Earley
https://github.com/chryslovelace/mixfix
https://github.com/pachopepe/mfxparser
https://github.com/Vierkantor/TexMixFix
https://github.com/phadej/mixfix
https://github.com/seba--/layout-parsing
