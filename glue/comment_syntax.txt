Counts of comment syntaxes from Rosetta Code:

81x: /* ML comment */
77x: // SL comment
69x: # single line comment
24x: ; comments begin with a semicolon
23x: -- SL comment
20x: (* ML nesting comment*)
18x: 'this is a comment
16x: REM sl comment
11x: % SL commnet
11x: /** This is a documentation comment */
9x: /* ML nesting comment */
8x: ! SL comment
6x: EOF marker: \s NIL end. END ### /]
6x: Reader comments: end #_ ## discard vv sz
5x: /// Documentation single line comment.
5x: { ML comment }
5x: * SL comment
3x: backslash continues SL comment \
3x: % ML comment %
3x: <!-- ML comment. -->
3x: ( ML commment )
2x: - SL comment
2x: {- ML nesting comment -}
2x: \SL comment
2x: .This is a single-line comment
2x: /' multi line nesting comment '/
2x: #| ML comment |#
2x: `SL Comment
2x: #| ML nesting comment |#
2x: [nesting ML comment]
2x: #[ ML comment ]#
2x: #;(e) A multi-line comment starts with #` and followed by the commented text enclosed by bracketing characters (e.g., (), [], {}, 「」, etc.). Using more than one bracketing character lets you include an unmatched close bracket.

The position can be significant: at the beginning of a command, at the beginning of a word, or anywhere (including in the middle of a word). With the first two it has no special meaning if it is not in that position.

strings at places where the result of an expression is ignored. strings at the beginning of function definitions are interpreted as documentation strings

SL: the line break itself is commented out as well, so a%\nb gets parsed as ab

\\ Also single line comment (continuation of the comment in previous line)



//! Inner single line Rustdoc comments apply to their enclosing item.
/*! Inner multi-line Rustdoc comments. */
->  comment
<-- SL comment
@ this comment on end of line
/This is a comment
⍝ This is a comment
:: SL comment
* an asterisk in 7th column comments the line out
*> SL comment
\[ ML comment ]
/[ ML nesting comment ]/
\{ ML comment }
\( ML comment )
\‘ ML comment ’
/+ ML nestable comment +/
/++ Nestable documentation comment. +/
'COMMENT' ML comment;
'comment' text 'comment'
#cs ML #ce
#/ multi-line comment /#
# TEXT #
comment ML comment;
% ML comment;
... ML comment ...
; ML comment ;
{ ML comment }
#* ML Comment *#
# block-comment until de-dent
*| This is a comment which is compiled but ignored at run time
(comment ML comment)
NOTE ML comment .
### ML comment ###
<!--- ML comment. --->




\ SL comment
( SL comment )
(( ML comment ))
comment: <ML comment> comment;
doc <ML Doc comment> enddoc

-- | documentation comment for the following code
-- ^ documentation comment for the preceding code
{-| documentation block comment -}
NB. Text that follows 'NB.' has no effect on execution.
Note 'example'
Another way to record multi-line comments as text is to use 'Note', which is actually
a simple program that makes it clearer when defined text is used only to provide comment.
)

//* comment line
/* comment line
#= ML comment =#
/ SL comment
;; SL comment

°°° ML comment °°°



%{ ML comment %}

OBTW multi line comment TLDR
BTW This is a single line comment.

%REM ML comment %END REM

--[[ ML comment --]]
--[====[ A multi-line comment that can contain [[ many square brackets ]] ]====]
dnl  this text completely disappears, including the new line
some text`'dnl comment
/# ML nesting comment #/

## Documentation comments start with double hash characters.

#~ ML comment ~#

(** This an OCamldoc documentation comment *)

%{ ML comment %}

\\ SL comment

(* ML comment }
{ ML comment *)

<@ OMT>ML comment</@>
<# OMIT>ML comment</#>

=pod ML comment =cut
any string beginning with an equals sign, and that appears in the initial column of a line, begins a multi-line comment. Blocks always end in =cut.

#{ ML comment }#

SL Comment: The final newline character is eaten so the comment can be used to hide the newline.

;;; SL comment

<# ML comment #>

""" string """
''' string '''

IGNORELINE your text here


#| ML nesting comment |#


=begin comment ML comment =end comment

#| SL comment attached to the code after them
#= SL comment attached to the code before them.

*ML comment;
— m-dash SL comment
> SL Comment
$ SL comment

#`{ML comment}

COMMENT This is a comment for Simula 67;


;* SL comment

''ML comment''
(= ML comment =)
| This is a comment

© SL comment

#! SL comment

--## comments are prefixed with a long handed double paintbrush
@# old-style comment to end of line
@; new-style comment to end of line

(# ML nesting comment #)

---- SL comment

#comment -[
I document the source text but will also be embedded in
the output library or executable file.]-


" SL comment

&& This is a comment
NOTE This is a commen

\SL comment terminated by backslash or EOL\
\\ SL comment

(: This is a XQuery comment :)
#<<<# ML comment #<<<#

